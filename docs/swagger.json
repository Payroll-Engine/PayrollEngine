{
  "openapi": "3.0.1",
  "info": {
    "title": "Payroll Engine Backend API v1",
    "description": "Payroll Engine API v0.5.0-230723",
    "version": "1"
  },
  "paths": {
    "/api/admin/application/stop": {
      "post": {
        "tags": [
          "Administration"
        ],
        "summary": "Requests termination of the API application",
        "description": "In IIS the application will be restarted with the next API request\r\nsource https://edi.wang/post/2019/3/7/restart-an-aspnet-core-application-programmatically",
        "operationId": "StopApplication",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/admin/application/clearcache": {
      "post": {
        "tags": [
          "Administration"
        ],
        "summary": "Clears the application cache",
        "operationId": "ClearApplicationCache",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/admin/reportmethods": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get the API report query method names (see TenantController.ExecuteReportQueryAsync)",
        "operationId": "GetApiReportMethods",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin": {
      "options": {
        "tags": [
          "Administration"
        ],
        "operationId": "GetOptions",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/calendars": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "Query calendars",
        "operationId": "QueryCalendars",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Calendars"
        ],
        "summary": "Add a new calendar",
        "operationId": "CreateCalendar",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The calendar to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Calendar"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Calendar"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Calendar"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Calendars"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/calendars/{calendarId}": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "Get a calendar",
        "operationId": "GetCalendar",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "calendarId",
            "in": "path",
            "description": "The id of the calendar",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Calendars"
        ],
        "summary": "Update a calendar",
        "operationId": "UpdateCalendar",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "calendarId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The calendar with updated values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Calendar"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Calendar"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Calendar"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Calendars"
        ],
        "summary": "Delete a calendar",
        "operationId": "DeleteCalendar",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "calendarId",
            "in": "path",
            "description": "The id of the calendar",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/calendars/periods": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "Get calendar period",
        "operationId": "GetCalendarPeriod",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "calendarName",
            "in": "query",
            "description": "The calendar configuration (default: tenant calendar)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cultureName",
            "in": "query",
            "description": "The culture to use (default: tenant culture)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset:<br />\r\n            less than zero: past<br />\r\n            zero: current (default)<br />\r\n            greater than zero: future<br />",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "periodMoment",
            "in": "query",
            "description": "The moment within the payrun period (default: now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatePeriod"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/calendars/cycles": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "Get calendar cycle",
        "operationId": "GetCalendarCycle",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "calendarName",
            "in": "query",
            "description": "The calendar configuration (default: tenant calendar)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cultureName",
            "in": "query",
            "description": "The culture to use (default: tenant culture)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cycleMoment",
            "in": "query",
            "description": "The moment within the payrun cycle (default: now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset:<br />\r\n            less than zero: past<br />\r\n            zero: current (default)<br />\r\n            greater than zero: future<br />",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatePeriod"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/calendars/values": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "Calculate calendar value",
        "operationId": "CalculateCalendarValue",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "The value to calculate",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "calendarName",
            "in": "query",
            "description": "The calendar configuration (default: tenant calendar)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cultureName",
            "in": "query",
            "description": "The culture to use (default: tenant culture)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evaluationDate",
            "in": "query",
            "description": "The evaluation period date (default: all)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "evaluationPeriodDate",
            "in": "query",
            "description": "The date within the evaluation period (default: evaluation date)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/cases/{caseId}/audits": {
      "get": {
        "tags": [
          "Case audits"
        ],
        "summary": "Query regulation case audits",
        "operationId": "QueryCaseAudits",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "The case id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Case audits"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/cases/{caseId}/audits/{auditId}": {
      "get": {
        "tags": [
          "Case audits"
        ],
        "summary": "Get a regulation case audit",
        "operationId": "GetCaseAudit",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "The case id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "auditId",
            "in": "path",
            "description": "The audit object id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseAudit"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/cases/{caseId}/fields/{fieldId}/audits": {
      "get": {
        "tags": [
          "Case field audits"
        ],
        "summary": "Query regulation case field audits",
        "operationId": "QueryCaseFieldAudits",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fieldId",
            "in": "path",
            "description": "The case field id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Case field audits"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/cases/{caseId}/fields/{fieldId}/audits/{auditId}": {
      "get": {
        "tags": [
          "Case field audits"
        ],
        "summary": "Get a regulation case field audit",
        "operationId": "GetCaseFieldAudit",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fieldId",
            "in": "path",
            "description": "The case field id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "auditId",
            "in": "path",
            "description": "The audit object id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseFieldAudit"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/cases/{caseId}/fields": {
      "get": {
        "tags": [
          "Case fields"
        ],
        "summary": "Query regulation case fields",
        "operationId": "QueryCaseFields",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "The case id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Case fields"
        ],
        "summary": "Add a new regulation case field",
        "operationId": "CreateCaseField",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "The case id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The case field to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseField"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseField"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CaseField"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseField"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Case fields"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/cases/{caseId}/fields/{fieldId}": {
      "get": {
        "tags": [
          "Case fields"
        ],
        "summary": "Get a regulation case field",
        "operationId": "GetCaseField",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "The case id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseFieldId",
            "in": "query",
            "description": "The case field id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseField"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Case fields"
        ],
        "summary": "Update a regulation case field",
        "operationId": "UpdateCaseField",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "The case id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The case field with updated values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseField"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseField"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CaseField"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseField"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Case fields"
        ],
        "summary": "Delete a regulation case field",
        "operationId": "DeleteCaseField",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "The case id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseFieldId",
            "in": "query",
            "description": "The case field id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/caserelations({relationId}/audits": {
      "get": {
        "tags": [
          "Case relation audits"
        ],
        "summary": "Query regulation case relation audits",
        "operationId": "QueryCaseRelationAudits",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "relationId",
            "in": "path",
            "description": "The case relation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Case relation audits"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/caserelations({relationId}/audits/{auditId}": {
      "get": {
        "tags": [
          "Case relation audits"
        ],
        "summary": "Get a regulation case relation audit",
        "operationId": "GetCaseRelationAudit",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "relationId",
            "in": "path",
            "description": "The relation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "auditId",
            "in": "path",
            "description": "The audit object id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseRelationAudit"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/caserelations": {
      "get": {
        "tags": [
          "Case relations"
        ],
        "summary": "Query regulation case relations",
        "operationId": "QueryCaseRelations",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Case relations"
        ],
        "summary": "Add a new regulation case relation",
        "operationId": "CreateCaseRelation",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The case relation to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseRelation"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseRelation"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CaseRelation"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseRelation"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Case relations"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/caserelations/{relationId}": {
      "get": {
        "tags": [
          "Case relations"
        ],
        "summary": "Get a regulation case relation",
        "operationId": "GetCaseRelation",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "relationId",
            "in": "path",
            "description": "The case id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseRelation"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Case relations"
        ],
        "summary": "Update a regulation case relation",
        "operationId": "UpdateCaseRelation",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "relationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The case relation with updated values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseRelation"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseRelation"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CaseRelation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseRelation"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Case relations"
        ],
        "summary": "Delete a regulation case relation",
        "operationId": "DeleteCaseRelation",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "relationId",
            "in": "path",
            "description": "The id of the case relation",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/caserelations/{relationId}/rebuild": {
      "put": {
        "tags": [
          "Case relations"
        ],
        "summary": "Rebuild regulation case relation",
        "operationId": "RebuildCaseRelation",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "relationId",
            "in": "path",
            "description": "The id of the case relation",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/cases": {
      "get": {
        "tags": [
          "Cases"
        ],
        "summary": "Query all regulation cases",
        "operationId": "QueryCases",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cases"
        ],
        "summary": "Add a new regulation case",
        "operationId": "CreateCase",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The case to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Case"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Case"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Case"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Case"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Cases"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/cases/{caseId}": {
      "get": {
        "tags": [
          "Cases"
        ],
        "summary": "Get a regulation case",
        "operationId": "GetCase",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "The case id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Case"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Cases"
        ],
        "summary": "Update a regulation case",
        "operationId": "UpdateCase",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The case with updated values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Case"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Case"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Case"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Case"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Cases"
        ],
        "summary": "Delete a regulation case",
        "operationId": "DeleteCase",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "The case id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/cases/{caseId}/rebuild": {
      "put": {
        "tags": [
          "Cases"
        ],
        "summary": "Rebuild regulation case",
        "operationId": "RebuildCase",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "The case id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/collectors/{collectorId}/audits": {
      "get": {
        "tags": [
          "Collector audits"
        ],
        "summary": "Query regulation collector audits",
        "operationId": "QueryCollectorAudits",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "collectorId",
            "in": "path",
            "description": "The id of the collector",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Collector audits"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "collectorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/collectors/{collectorId}/audits/{auditId}": {
      "get": {
        "tags": [
          "Collector audits"
        ],
        "summary": "Get a regulation collector audit",
        "operationId": "GetCollectorAudit",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "collectorId",
            "in": "path",
            "description": "The collector id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "auditId",
            "in": "path",
            "description": "The audit object id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectorAudit"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/collectors": {
      "get": {
        "tags": [
          "Collectors"
        ],
        "summary": "Get regulation collectors",
        "operationId": "QueryCollectors",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Collectors"
        ],
        "summary": "Add a new regulation collector",
        "operationId": "CreateCollector",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The collector to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Collector"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Collector"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Collector"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Collector"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Collectors"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/collectors/{collectorId}": {
      "get": {
        "tags": [
          "Collectors"
        ],
        "summary": "Get a regulation collector",
        "operationId": "GetCollector",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "collectorId",
            "in": "path",
            "description": "The collector id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Collector"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Collectors"
        ],
        "summary": "Update a regulation collector",
        "operationId": "UpdateCollector",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "collectorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The collector with updated values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Collector"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Collector"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Collector"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Collector"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Collectors"
        ],
        "summary": "Delete a regulation collector",
        "operationId": "DeleteCollector",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "collectorId",
            "in": "path",
            "description": "The id of the collector",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/collectors/{collectorId}/rebuild": {
      "put": {
        "tags": [
          "Collectors"
        ],
        "summary": "Rebuild regulation collector",
        "operationId": "RebuildCollector",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "collectorId",
            "in": "path",
            "description": "The id of the collector",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/companycases/changes": {
      "get": {
        "tags": [
          "Company case changes"
        ],
        "summary": "Query company case changes",
        "operationId": "QueryCompanyCaseChanges",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "divisionId",
            "in": "query",
            "description": "The division id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "The culture",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeGlobal",
            "in": "query",
            "description": "Exclude global changes",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Company case changes"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/companycases/changes/{caseChangeId}": {
      "get": {
        "tags": [
          "Company case changes"
        ],
        "summary": "Get a company case change",
        "operationId": "GetCompanyCaseChange",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseChangeId",
            "in": "path",
            "description": "The case value change id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseChange"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/companycases/changes/values": {
      "get": {
        "tags": [
          "Company case changes"
        ],
        "summary": "Query company case changes values",
        "operationId": "QueryCompanyCaseChangesValues",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "divisionId",
            "in": "query",
            "description": "The division id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "The culture",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeGlobal",
            "in": "query",
            "description": "Exclude global changes",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/companycases/changes/{caseValueId}": {
      "delete": {
        "tags": [
          "Company case changes"
        ],
        "summary": "Delete a company case value",
        "operationId": "DeleteCompanyCaseChange",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseValueId",
            "in": "path",
            "description": "The case value id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/companycases/{caseValueId}/documents": {
      "get": {
        "tags": [
          "Company case documents"
        ],
        "summary": "Query company case documents",
        "operationId": "QueryCompanyCaseDocuments",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseValueId",
            "in": "path",
            "description": "The case value id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Company case documents"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseValueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/companycases/{caseValueId}/documents/{documentId}": {
      "get": {
        "tags": [
          "Company case documents"
        ],
        "summary": "Get a company case document",
        "operationId": "GetCompanyCaseDocument",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseValueId",
            "in": "path",
            "description": "The case value id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "The document id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseDocument"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/companycases": {
      "get": {
        "tags": [
          "Company case values"
        ],
        "summary": "Query company case values",
        "operationId": "QueryCompanyCaseValues",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "divisionId",
            "in": "query",
            "description": "The division id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseFieldName",
            "in": "query",
            "description": "The case field name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseName",
            "in": "query",
            "description": "The case name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "divisionScope",
            "in": "query",
            "description": "The division scope",
            "schema": {
              "$ref": "#/components/schemas/DivisionScope"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Company case values"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/companycases/slots": {
      "get": {
        "tags": [
          "Company case values"
        ],
        "summary": "Get company case value slots",
        "operationId": "GetCompanyCaseValueSlots",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseFieldName",
            "in": "query",
            "description": "The case field name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/companycases/{caseValueId}": {
      "get": {
        "tags": [
          "Company case values"
        ],
        "summary": "Get a company case value",
        "operationId": "GetCompanyCaseValue",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseValueId",
            "in": "path",
            "description": "The company case value id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseValue"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/divisions": {
      "get": {
        "tags": [
          "Divisions"
        ],
        "summary": "Query divisions",
        "operationId": "QueryDivisions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Divisions"
        ],
        "summary": "Add a new division",
        "operationId": "CreateDivision",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The division to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Division"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Division"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Division"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Division"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Divisions"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/divisions/{divisionId}": {
      "get": {
        "tags": [
          "Divisions"
        ],
        "summary": "Get a division",
        "operationId": "GetDivision",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "divisionId",
            "in": "path",
            "description": "The id of the division",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Division"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Divisions"
        ],
        "summary": "Update a division",
        "operationId": "UpdateDivision",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "divisionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The division with updated values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Division"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Division"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Division"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Division"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Divisions"
        ],
        "summary": "Delete a division",
        "operationId": "DeleteDivision",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "divisionId",
            "in": "path",
            "description": "The id of the division",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/divisions/{divisionId}/attributes/{attributeName}": {
      "get": {
        "tags": [
          "Divisions"
        ],
        "summary": "Get a division attribute",
        "operationId": "GetDivisionAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "divisionId",
            "in": "path",
            "description": "The id of the division",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Divisions"
        ],
        "summary": "Set a division attribute",
        "operationId": "SetDivisionAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "divisionId",
            "in": "path",
            "description": "The id of the division",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The attribute value as JSON",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Divisions"
        ],
        "summary": "Delete a division attribute",
        "operationId": "DeleteDivisionAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "divisionId",
            "in": "path",
            "description": "The id of the division",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/employees/{employeeId}/cases/changes": {
      "get": {
        "tags": [
          "Employee case changes"
        ],
        "summary": "Query employee case changes",
        "operationId": "QueryEmployeeCaseChanges",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The employee id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "divisionId",
            "in": "query",
            "description": "The division id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "The culture",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeGlobal",
            "in": "query",
            "description": "Exclude global changes",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Employee case changes"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/employees/{employeeId}/cases/changes/{caseChangeId}": {
      "get": {
        "tags": [
          "Employee case changes"
        ],
        "summary": "Get an employee case change",
        "operationId": "GetEmployeeCaseChange",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The employee id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseChangeId",
            "in": "path",
            "description": "The case value change id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseChange"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/employees/{employeeId}/cases/changes/values": {
      "get": {
        "tags": [
          "Employee case changes"
        ],
        "summary": "Query employee case changes values",
        "operationId": "QueryEmployeeCaseChangesValues",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The employee id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "divisionId",
            "in": "query",
            "description": "The division id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "The culture",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeGlobal",
            "in": "query",
            "description": "Exclude global changes",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/employees/{employeeId}/cases/changes/{caseValueId}": {
      "delete": {
        "tags": [
          "Employee case changes"
        ],
        "summary": "Delete a case value",
        "operationId": "DeleteEmployeeCaseChange",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The employee id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseValueId",
            "in": "path",
            "description": "The case value id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/employees/{employeeId}/cases/{caseValueId}/documents": {
      "get": {
        "tags": [
          "Employee case documents"
        ],
        "summary": "Query employee case documents",
        "operationId": "QueryEmployeeCaseDocuments",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The employee id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseValueId",
            "in": "path",
            "description": "The case value id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Employee case documents"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseValueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/employees/{employeeId}/cases/{caseValueId}/documents/{documentId}": {
      "get": {
        "tags": [
          "Employee case documents"
        ],
        "summary": "Get an employee case document",
        "operationId": "GetEmployeeCaseDocument",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The employee id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseValueId",
            "in": "path",
            "description": "The case value id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "The document id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseDocument"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/employees/{employeeId}/cases": {
      "get": {
        "tags": [
          "Employee case values"
        ],
        "summary": "Query employee case values",
        "operationId": "QueryEmployeeCaseValues",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The employee id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "divisionId",
            "in": "query",
            "description": "The division id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseFieldName",
            "in": "query",
            "description": "The case field name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseName",
            "in": "query",
            "description": "The case name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "divisionScope",
            "in": "query",
            "description": "The division scope",
            "schema": {
              "$ref": "#/components/schemas/DivisionScope"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Employee case values"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/employees/{employeeId}/cases/slots": {
      "get": {
        "tags": [
          "Employee case values"
        ],
        "summary": "Get employee case value slots",
        "operationId": "GetEmployeeCaseValueSlots",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The employee id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseFieldName",
            "in": "query",
            "description": "The case field name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/employees/{employeeId}/cases/{caseValueId}": {
      "get": {
        "tags": [
          "Employee case values"
        ],
        "summary": "Get an employee case value",
        "operationId": "GetEmployeeCaseValue",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The employee id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseValueId",
            "in": "path",
            "description": "The employee case value id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseValue"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/employees": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Query employees",
        "operationId": "QueryEmployees",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "divisionId",
            "in": "query",
            "description": "The division id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Employees"
        ],
        "summary": "Add a new employee",
        "operationId": "CreateEmployee",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The employee to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Employees"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/employees/{employeeId}": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Get a employee",
        "operationId": "GetEmployee",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The id of the employee",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employees"
        ],
        "summary": "Update a employee",
        "operationId": "UpdateEmployee",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The employee with updated values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Employees"
        ],
        "summary": "Delete a employee",
        "operationId": "DeleteEmployee",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The id of the employee",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/employees/{employeeId}/attributes/{attributeName}": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Get an employee attribute",
        "operationId": "GetEmployeeAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The id of the employee",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Employees"
        ],
        "summary": "Set an employee attribute",
        "operationId": "SetEmployeeAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The id of the employee",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The attribute value as JSON",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Employees"
        ],
        "summary": "Delete an employee attribute",
        "operationId": "DeleteEmployeeAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The id of the employee",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/globalcases/changes": {
      "get": {
        "tags": [
          "Global case changes"
        ],
        "summary": "Query global case changes",
        "operationId": "QueryGlobalCaseChanges",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "divisionId",
            "in": "query",
            "description": "The division id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "The culture",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeGlobal",
            "in": "query",
            "description": "Exclude global changes",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Global case changes"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/globalcases/changes/{caseChangeId}": {
      "get": {
        "tags": [
          "Global case changes"
        ],
        "summary": "Get a global case change",
        "operationId": "GetGlobalCaseChange",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseChangeId",
            "in": "path",
            "description": "The case value change id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseChange"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/globalcases/changes/values": {
      "get": {
        "tags": [
          "Global case changes"
        ],
        "summary": "Query global case changes values",
        "operationId": "QueryGlobalCaseChangesValues",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "divisionId",
            "in": "query",
            "description": "The division id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "The culture",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeGlobal",
            "in": "query",
            "description": "Exclude global changes",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/globalcases/changes/{caseValueId}": {
      "delete": {
        "tags": [
          "Global case changes"
        ],
        "summary": "Delete a global case value",
        "operationId": "DeleteGlobalCaseChange",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseValueId",
            "in": "path",
            "description": "The case value id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/globalcases/{caseValueId}/documents": {
      "get": {
        "tags": [
          "Global case documents"
        ],
        "summary": "Query global case documents",
        "operationId": "QueryGlobalCaseDocuments",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseValueId",
            "in": "path",
            "description": "The case value id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Global case documents"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseValueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/globalcases/{caseValueId}/documents/{documentId}": {
      "get": {
        "tags": [
          "Global case documents"
        ],
        "summary": "Get a global case document",
        "operationId": "GetGlobalCaseDocument",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseValueId",
            "in": "path",
            "description": "The case value id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "The document id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseDocument"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/globalcases": {
      "get": {
        "tags": [
          "Global case values"
        ],
        "summary": "Query global case values",
        "operationId": "QueryGlobalCaseValues",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "divisionId",
            "in": "query",
            "description": "The division id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseFieldName",
            "in": "query",
            "description": "The case field name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseName",
            "in": "query",
            "description": "The case name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "divisionScope",
            "in": "query",
            "description": "The division scope",
            "schema": {
              "$ref": "#/components/schemas/DivisionScope"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Global case values"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/globalcases/slots": {
      "get": {
        "tags": [
          "Global case values"
        ],
        "summary": "Get global case value slots",
        "operationId": "GetGlobalCaseValueSlots",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseFieldName",
            "in": "query",
            "description": "The case field name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/globalcases/{caseValueId}": {
      "get": {
        "tags": [
          "Global case values"
        ],
        "summary": "Get a global case value",
        "operationId": "GetGlobalCaseValue",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseValueId",
            "in": "path",
            "description": "The global case value id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseValue"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/logs": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "Query logs",
        "operationId": "QueryLogs",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Logs"
        ],
        "summary": "Add a new log",
        "operationId": "CreateLog",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The log to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Log"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Log"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Log"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Log"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Logs"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/logs/{logId}": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "Get a log",
        "operationId": "GetLog",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "logId",
            "in": "path",
            "description": "The id of the log",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Log"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Logs"
        ],
        "summary": "Delete a log",
        "operationId": "DeleteLog",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "logId",
            "in": "path",
            "description": "The id of the log",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/lookups/{lookupId}/audits": {
      "get": {
        "tags": [
          "Lookup audits"
        ],
        "summary": "Query regulation lookup audits",
        "operationId": "QueryLookupAudits",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lookupId",
            "in": "path",
            "description": "The lookup id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Lookup audits"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lookupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/lookups/{lookupId}/audits/{auditId}": {
      "get": {
        "tags": [
          "Lookup audits"
        ],
        "summary": "Get a regulation lookup audit",
        "operationId": "GetLookupAudit",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lookupId",
            "in": "path",
            "description": "The lookup id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "auditId",
            "in": "path",
            "description": "The audit object id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupAudit"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/lookups/{lookupId}/values/{lookupValueId}/audits": {
      "get": {
        "tags": [
          "Lookup value audits"
        ],
        "summary": "Query regulation lookup value audits",
        "operationId": "QueryLookupValueAudits",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lookupId",
            "in": "path",
            "description": "The lookup id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lookupValueId",
            "in": "path",
            "description": "The lookup value id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Lookup value audits"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lookupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lookupValueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/lookups/{lookupId}/values/{lookupValueId}/audits/{auditId}": {
      "get": {
        "tags": [
          "Lookup value audits"
        ],
        "summary": "Get a regulation lookup audit",
        "operationId": "GetLookupValueAudit",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lookupId",
            "in": "path",
            "description": "The lookup id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lookupValueId",
            "in": "path",
            "description": "The lookup value id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "auditId",
            "in": "path",
            "description": "The audit object id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupValueAudit"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/lookups/{lookupId}/values": {
      "get": {
        "tags": [
          "Lookup values"
        ],
        "summary": "Query regulation lookup values",
        "operationId": "QueryLookupValues",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lookupId",
            "in": "path",
            "description": "The lookup id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Lookup values"
        ],
        "summary": "Add a new regulation lookup value",
        "operationId": "CreateLookupValue",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lookupId",
            "in": "path",
            "description": "The id of the lookup",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The lookup value to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LookupValue"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LookupValue"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LookupValue"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupValue"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Lookup values"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lookupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/lookups/{lookupId}/values/data": {
      "get": {
        "tags": [
          "Lookup values"
        ],
        "summary": "Get lookup values data",
        "operationId": "GetLookupValuesData",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lookupId",
            "in": "path",
            "description": "The lookup id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "The culture",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LookupValueData"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/lookups/{lookupId}/values/{lookupValueId}": {
      "get": {
        "tags": [
          "Lookup values"
        ],
        "summary": "Get a regulation lookup value",
        "operationId": "GetLookupValue",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lookupId",
            "in": "path",
            "description": "The lookup id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lookupValueId",
            "in": "path",
            "description": "The id of the lookup value",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupValue"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Lookup values"
        ],
        "summary": "Update a regulation lookup value",
        "operationId": "UpdateLookupValue",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lookupId",
            "in": "path",
            "description": "The id of the lookup",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lookupValueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The lookup value with updated values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LookupValue"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LookupValue"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LookupValue"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupValue"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Lookup values"
        ],
        "summary": "Delete a regulation lookup value",
        "operationId": "DeleteLookupValue",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lookupId",
            "in": "path",
            "description": "The id of the lookup",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lookupValueId",
            "in": "path",
            "description": "The id of the lookup value",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/lookups": {
      "get": {
        "tags": [
          "Lookups"
        ],
        "summary": "Query regulation lookups",
        "operationId": "QueryLookups",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Lookups"
        ],
        "summary": "Add a new regulation lookup",
        "operationId": "CreateLookup",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The lookup to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Lookup"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Lookup"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Lookup"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Lookup"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Lookups"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/lookups/{lookupId}": {
      "get": {
        "tags": [
          "Lookups"
        ],
        "summary": "Get a regulation lookup",
        "operationId": "GetLookup",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lookupId",
            "in": "path",
            "description": "The id of the lookup",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Lookup"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Lookups"
        ],
        "summary": "Update a regulation lookup",
        "operationId": "UpdateLookup",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lookupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The lookup with updated values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Lookup"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Lookup"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Lookup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Lookup"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Lookups"
        ],
        "summary": "Delete a regulation lookup",
        "operationId": "DeleteLookup",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lookupId",
            "in": "path",
            "description": "The id of the lookup",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/lookups/sets": {
      "get": {
        "tags": [
          "Lookups"
        ],
        "summary": "Query regulation lookup sets",
        "operationId": "QueryLookupSets",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Lookups"
        ],
        "summary": "Add lookup set including the lookup values",
        "operationId": "CreateLookupSets",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The lookups to add",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LookupSet"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LookupSet"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LookupSet"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/lookups/sets/{lookupId}": {
      "get": {
        "tags": [
          "Lookups"
        ],
        "summary": "Get a regulation lookup set",
        "operationId": "GetLookupSet",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lookupId",
            "in": "path",
            "description": "The id of the lookup",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupSet"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Lookups"
        ],
        "summary": "Delete lookup set including the lookup values",
        "operationId": "DeleteLookupSet",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lookupId",
            "in": "path",
            "description": "The id of the lookup",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/nationalcases/changes": {
      "get": {
        "tags": [
          "National case changes"
        ],
        "summary": "Query national case changes",
        "operationId": "QueryNationalCaseChanges",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "divisionId",
            "in": "query",
            "description": "The division id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "The culture",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeGlobal",
            "in": "query",
            "description": "Exclude global changes",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "National case changes"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/nationalcases/changes/{caseChangeId}": {
      "get": {
        "tags": [
          "National case changes"
        ],
        "summary": "Get a national case change",
        "operationId": "GetNationalCaseChange",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseChangeId",
            "in": "path",
            "description": "The case value change id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseChange"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/nationalcases/changes/values": {
      "get": {
        "tags": [
          "National case changes"
        ],
        "summary": "Query national case changes values",
        "operationId": "QueryNationalCaseChangesValues",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "divisionId",
            "in": "query",
            "description": "The division id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "The culture",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeGlobal",
            "in": "query",
            "description": "Exclude global changes",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/nationalcases/changes/{caseValueId}": {
      "delete": {
        "tags": [
          "National case changes"
        ],
        "summary": "Delete a national case value",
        "operationId": "DeleteNationalCaseChange",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseValueId",
            "in": "path",
            "description": "The case value id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/nationalcases/{caseValueId}/documents": {
      "get": {
        "tags": [
          "National case documents"
        ],
        "summary": "Query national case documents",
        "operationId": "QueryNationalCaseDocuments",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseValueId",
            "in": "path",
            "description": "The case value id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "National case documents"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseValueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/nationalcases/{caseValueId}/documents/{documentId}": {
      "get": {
        "tags": [
          "National case documents"
        ],
        "summary": "Get a national case document",
        "operationId": "GetNationalCaseDocument",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseValueId",
            "in": "path",
            "description": "The case value id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "The document id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseDocument"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/nationalcases": {
      "get": {
        "tags": [
          "National case values"
        ],
        "summary": "Query national case values",
        "operationId": "QueryNationalCaseValues",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "divisionId",
            "in": "query",
            "description": "The division id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseFieldName",
            "in": "query",
            "description": "The case field name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseName",
            "in": "query",
            "description": "The case name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "divisionScope",
            "in": "query",
            "description": "The division scope",
            "schema": {
              "$ref": "#/components/schemas/DivisionScope"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "National case values"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/nationalcases/slots": {
      "get": {
        "tags": [
          "National case values"
        ],
        "summary": "Get national case value slots",
        "operationId": "GetNationalCaseValueSlots",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseFieldName",
            "in": "query",
            "description": "The case field name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/nationalcases/{caseValueId}": {
      "get": {
        "tags": [
          "National case values"
        ],
        "summary": "Get a national case value",
        "operationId": "GetNationalCaseValue",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseValueId",
            "in": "path",
            "description": "The national case value id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseValue"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrollresults/consolidated": {
      "get": {
        "tags": [
          "Payroll consolidated results"
        ],
        "summary": "Query consolidated payroll results",
        "operationId": "GetConsolidatedPayrollResult",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "The employee id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "periodStart",
            "in": "query",
            "description": "Period start date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "periodEnd",
            "in": "query",
            "description": "Period end date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "divisionId",
            "in": "query",
            "description": "The division id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "forecast",
            "in": "query",
            "description": "The forecast name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobStatus",
            "in": "query",
            "description": "The payrun job status",
            "schema": {
              "$ref": "#/components/schemas/PayrunJobStatus"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "The result tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsolidatedPayrollResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Payroll consolidated results"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrollresults/consolidated/collectors": {
      "get": {
        "tags": [
          "Payroll consolidated results"
        ],
        "summary": "Get consolidated collector results",
        "operationId": "GetConsolidatedCollectorResults",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "The employee id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "periodStarts",
            "in": "query",
            "description": "Period start dates",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "divisionId",
            "in": "query",
            "description": "The division id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "collectorNames",
            "in": "query",
            "description": "The collector names",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "evaluationDate",
            "in": "query",
            "description": "The evaluation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "forecast",
            "in": "query",
            "description": "The forecast name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobStatus",
            "in": "query",
            "description": "The payrun job status",
            "schema": {
              "$ref": "#/components/schemas/PayrunJobStatus"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "The result tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CollectorResult"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrollresults/consolidated/wagetypes": {
      "get": {
        "tags": [
          "Payroll consolidated results"
        ],
        "summary": "Query consolidated wage type results",
        "operationId": "GetConsolidatedWageTypeResults",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "The employee id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "periodStarts",
            "in": "query",
            "description": "Period start dates",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "divisionId",
            "in": "query",
            "description": "The division id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "evaluationDate",
            "in": "query",
            "description": "The evaluation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "forecast",
            "in": "query",
            "description": "The forecast name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobStatus",
            "in": "query",
            "description": "The payrun job status",
            "schema": {
              "$ref": "#/components/schemas/PayrunJobStatus"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "The result tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "wageTypeNumbers",
            "in": "query",
            "description": "The wage type numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WageTypeResult"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrollresults/consolidated/payruns": {
      "get": {
        "tags": [
          "Payroll consolidated results"
        ],
        "summary": "Query consolidated payrun results",
        "operationId": "GetConsolidatedPayrunResults",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "The employee id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "periodStarts",
            "in": "query",
            "description": "Period start dates",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "divisionId",
            "in": "query",
            "description": "The division id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "evaluationDate",
            "in": "query",
            "description": "The evaluation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "forecast",
            "in": "query",
            "description": "The forecast name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobStatus",
            "in": "query",
            "description": "The payrun job status",
            "schema": {
              "$ref": "#/components/schemas/PayrunJobStatus"
            }
          },
          {
            "name": "resultNames",
            "in": "query",
            "description": "The result names",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "The result tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayrunResult"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls/{payrollId}/layers": {
      "get": {
        "tags": [
          "Payroll layers"
        ],
        "summary": "Query payroll layers",
        "operationId": "QueryPayrollLayers",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Payroll layers"
        ],
        "summary": "Add a new payroll layer",
        "operationId": "CreatePayrollLayer",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The payroll layer to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollLayer"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollLayer"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollLayer"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollLayer"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Payroll layers"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls/{payrollId}/layers/{layerId}": {
      "get": {
        "tags": [
          "Payroll layers"
        ],
        "summary": "Get a payroll layer",
        "operationId": "GetPayrollLayer",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "layerId",
            "in": "path",
            "description": "The payroll layer id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollLayer"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Payroll layers"
        ],
        "summary": "Update a payroll layer",
        "operationId": "UpdatePayrollLayer",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "layerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The payroll layer with updated values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollLayer"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollLayer"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollLayer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollLayer"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Payroll layers"
        ],
        "summary": "Delete a payroll layer",
        "operationId": "DeletePayrollLayer",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "layerId",
            "in": "path",
            "description": "The id of the payroll layer",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls/{payrollId}/layers/{layerId}/attributes/{attributeName}": {
      "get": {
        "tags": [
          "Payroll layers"
        ],
        "summary": "Get a payroll layer attribute",
        "operationId": "GetPayrollLayerAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "layerId",
            "in": "path",
            "description": "The id of the payroll layer",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Payroll layers"
        ],
        "summary": "Set a payroll layer attribute",
        "operationId": "SetPayrollLayerAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "layerId",
            "in": "path",
            "description": "The id of the payroll layer",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The attribute value as JSON",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Payroll layers"
        ],
        "summary": "Delete a payroll layer attribute",
        "operationId": "DeletePayrollLayerAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "layerId",
            "in": "path",
            "description": "The id of the payroll layer",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrollresults": {
      "get": {
        "tags": [
          "Payroll results"
        ],
        "summary": "Query payroll results",
        "operationId": "QueryPayrollResults",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Payroll results"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrollresults/{payrollResultId}": {
      "get": {
        "tags": [
          "Payroll results"
        ],
        "summary": "Get a payroll result",
        "operationId": "GetPayrollResult",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollResultId",
            "in": "path",
            "description": "The payroll result id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrollresults/{payrollResultId}/collectors": {
      "get": {
        "tags": [
          "Payroll results"
        ],
        "summary": "Query payroll collector results",
        "operationId": "QueryCollectorResults",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollResultId",
            "in": "path",
            "description": "The payroll result id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CollectorResult"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrollresults/{payrollResultId}/collectors/{collectorResultId}/custom": {
      "get": {
        "tags": [
          "Payroll results"
        ],
        "summary": "Query payroll collector custom results",
        "operationId": "QueryCollectorCustomResults",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollResultId",
            "in": "path",
            "description": "The payroll result id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "collectorResultId",
            "in": "path",
            "description": "The collector result id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CollectorCustomResult"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrollresults/{payrollResultId}/wagetypes": {
      "get": {
        "tags": [
          "Payroll results"
        ],
        "summary": "Query payroll wage type results",
        "operationId": "QueryWageTypeResults",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollResultId",
            "in": "path",
            "description": "The payroll result id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WageTypeResult"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrollresults/{payrollResultId}/wagetypes/{wageTypeResultId}/custom": {
      "get": {
        "tags": [
          "Payroll results"
        ],
        "summary": "Query payroll wage type custom results",
        "operationId": "QueryWageTypeCustomResults",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollResultId",
            "in": "path",
            "description": "The payroll result id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "wageTypeResultId",
            "in": "path",
            "description": "The wage type result id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WageTypeCustomResult"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrollresults/{payrollResultId}/payruns": {
      "get": {
        "tags": [
          "Payroll results"
        ],
        "summary": "Query payroll payrun results",
        "operationId": "QueryPayrunResults",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollResultId",
            "in": "path",
            "description": "The payroll result id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayrunResult"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrollresults/values": {
      "get": {
        "tags": [
          "Payroll results"
        ],
        "summary": "Query payroll result values",
        "operationId": "QueryPayrollResultValues",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "The employee id (default: all)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrollresults/sets": {
      "get": {
        "tags": [
          "Payroll results"
        ],
        "summary": "Query payroll result sets",
        "operationId": "QueryPayrollResultSets",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayrollResultSet"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrollresults/sets/{payrollResultId}": {
      "get": {
        "tags": [
          "Payroll results"
        ],
        "summary": "Get a payroll result set",
        "operationId": "GetPayrollResultSet",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollResultId",
            "in": "path",
            "description": "The payroll result id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollResultSet"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Query payrolls",
        "operationId": "QueryPayrolls",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Add a new payroll",
        "operationId": "CreatePayroll",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The payroll to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Payroll"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Payroll"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Payroll"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payroll"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Payrolls"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls/{payrollId}": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get a payroll",
        "operationId": "GetPayroll",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payroll"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Update a payroll",
        "operationId": "UpdatePayroll",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The payroll with updated values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Payroll"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Payroll"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Payroll"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payroll"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Delete a payroll",
        "operationId": "DeletePayroll",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls/{payrollId}/regulations": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get payroll regulations",
        "operationId": "GetPayrollRegulations",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "evaluationDate",
            "in": "query",
            "description": "Creation date filter (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "regulationDate",
            "in": "query",
            "description": "The regulation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Regulation"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls/{payrollId}/cases/available": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get active and available cases",
        "operationId": "GetPayrollAvailableCases",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "The user id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseType",
            "in": "query",
            "description": "The case type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CaseType"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "The employee id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseNames",
            "in": "query",
            "description": "The case names (optional)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "clusterSetName",
            "in": "query",
            "description": "The cluster set name (optional)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "The culture name based on RFC 4646",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evaluationDate",
            "in": "query",
            "description": "The evaluation date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "hidden",
            "in": "query",
            "description": "Hidden case (default: false)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "regulationDate",
            "in": "query",
            "description": "The regulation date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Case"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls/{payrollId}/cases/build/{caseName}": {
      "post": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Build case with fields and related cases",
        "description": "Request body contains array of case values (optional)\r\nWithout the request body, this would be a GET method",
        "operationId": "BuildPayrollCase",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseName",
            "in": "path",
            "description": "The case name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "The employee id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "The user id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "clusterSetName",
            "in": "query",
            "description": "The cluster set name (optional)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "The culture name based on RFC 4646",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evaluationDate",
            "in": "query",
            "description": "The evaluation date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "regulationDate",
            "in": "query",
            "description": "The regulation date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "requestBody": {
          "description": "The case change setup (optional)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseChangeSetup"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseChangeSetup"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CaseChangeSetup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseSet"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls/{payrollId}/changes/values": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Query payroll case change values",
        "operationId": "QueryPayrollCaseChangeValues",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "The user id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseType",
            "in": "query",
            "description": "The case type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CaseType"
            }
          },
          {
            "name": "divisionId",
            "in": "query",
            "description": "The division id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "The employeeId id, mandatory for employee case",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "clusterSetName",
            "in": "query",
            "description": "The cluster set name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "The culture",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evaluationDate",
            "in": "query",
            "description": "The evaluation date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "excludeGlobal",
            "in": "query",
            "description": "Exclude global changes",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regulationDate",
            "in": "query",
            "description": "The regulation date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls/{payrollId}/cases/values": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get case values",
        "operationId": "GetPayrollCaseValues",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "The employee id, mandatory for employee case",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseFieldNames",
            "in": "query",
            "description": "The case field names (default: all)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "caseSlot",
            "in": "query",
            "description": "The case slot",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The time period end date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The time period start date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CaseFieldValue"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls/{payrollId}/cases/values/time": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get payroll case values from a specific time moment",
        "operationId": "GetPayrollTimeCaseValues",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "The employee id, mandatory for employee case",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseFieldNames",
            "in": "query",
            "description": "The case field names (default: all)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "caseType",
            "in": "query",
            "description": "The case type",
            "schema": {
              "$ref": "#/components/schemas/CaseType"
            }
          },
          {
            "name": "evaluationDate",
            "in": "query",
            "description": "The evaluation date (default: valueDate)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "regulationDate",
            "in": "query",
            "description": "The regulation date (default: valueDate)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "valueDate",
            "in": "query",
            "description": "The moment of the value (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CaseValue"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls/{payrollId}/cases/values/periods": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get available case period values",
        "operationId": "GetPayrollAvailableCaseFieldValues",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "The user id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseFieldNames",
            "in": "query",
            "description": "The case field names",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The time period start date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The time period end date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "The employee id, mandatory for employee case",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "The query culture name based on RFC 4646",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evaluationDate",
            "in": "query",
            "description": "Creation date filter (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "regulationDate",
            "in": "query",
            "description": "The regulation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CaseFieldValue"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls/{payrollId}/cases": {
      "post": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Add case change",
        "description": "Request body contains the case change",
        "operationId": "AddPayrollCase",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The case change setup",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseChangeSetup"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseChangeSetup"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CaseChangeSetup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseChange"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get payroll cases",
        "operationId": "GetPayrollCases",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseNames",
            "in": "query",
            "description": "The case names (case-insensitive, default: all)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "caseType",
            "in": "query",
            "description": "The case type (default: all)",
            "schema": {
              "$ref": "#/components/schemas/CaseType"
            }
          },
          {
            "name": "clusterSetName",
            "in": "query",
            "description": "The cluster set name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evaluationDate",
            "in": "query",
            "description": "The evaluation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "overrideType",
            "in": "query",
            "description": "The override type filter (default: active)",
            "schema": {
              "$ref": "#/components/schemas/OverrideType"
            }
          },
          {
            "name": "regulationDate",
            "in": "query",
            "description": "The regulation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Case"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls/{payrollId}/casefields": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get payroll case fields, sorted by order",
        "operationId": "GetPayrollCaseFields",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseFieldNames",
            "in": "query",
            "description": "The case field names (case-insensitive, default: all)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "clusterSetName",
            "in": "query",
            "description": "The cluster set name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evaluationDate",
            "in": "query",
            "description": "The evaluation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "overrideType",
            "in": "query",
            "description": "The override type filter (default: active)",
            "schema": {
              "$ref": "#/components/schemas/OverrideType"
            }
          },
          {
            "name": "regulationDate",
            "in": "query",
            "description": "The regulation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CaseField"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls/{payrollId}/caserelations": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get payroll case relations, sorted by order",
        "operationId": "GetPayrollCaseRelations",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "clusterSetName",
            "in": "query",
            "description": "The cluster set name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evaluationDate",
            "in": "query",
            "description": "The evaluation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "overrideType",
            "in": "query",
            "description": "The override type filter (default: active)",
            "schema": {
              "$ref": "#/components/schemas/OverrideType"
            }
          },
          {
            "name": "regulationDate",
            "in": "query",
            "description": "The regulation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "sourceCaseName",
            "in": "query",
            "description": "The relation source case name (case-insensitive, default: all)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetCaseName",
            "in": "query",
            "description": "The relation target case name (case-insensitive, default: all)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CaseRelation"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls/{payrollId}/wagetypes": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get payroll wage types",
        "operationId": "GetPayrollWageTypes",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "clusterSetName",
            "in": "query",
            "description": "The cluster set name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evaluationDate",
            "in": "query",
            "description": "The evaluation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "overrideType",
            "in": "query",
            "description": "The override type filter (default: active)",
            "schema": {
              "$ref": "#/components/schemas/OverrideType"
            }
          },
          {
            "name": "regulationDate",
            "in": "query",
            "description": "The regulation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "wageTypeNumbers",
            "in": "query",
            "description": "The wage type numbers (default: all)",
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WageType"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls/{payrollId}/collectors": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get payroll collectors",
        "operationId": "GetPayrollCollectors",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "clusterSetName",
            "in": "query",
            "description": "The cluster set name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "collectorNames",
            "in": "query",
            "description": "The collector names filter (case-insensitive, default is all)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "evaluationDate",
            "in": "query",
            "description": "The evaluation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "overrideType",
            "in": "query",
            "description": "The override type filter (default: active)",
            "schema": {
              "$ref": "#/components/schemas/OverrideType"
            }
          },
          {
            "name": "regulationDate",
            "in": "query",
            "description": "The regulation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Collector"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls/{payrollId}/lookups": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get payroll lookups",
        "operationId": "GetPayrollLookups",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "evaluationDate",
            "in": "query",
            "description": "The evaluation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "lookupNames",
            "in": "query",
            "description": "The lookup names filter (case-insensitive, default is all)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "overrideType",
            "in": "query",
            "description": "The override type filter (default: active)",
            "schema": {
              "$ref": "#/components/schemas/OverrideType"
            }
          },
          {
            "name": "regulationDate",
            "in": "query",
            "description": "The regulation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Lookup"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls/{payrollId}/lookups/values": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get payroll lookup values",
        "operationId": "GetPayrollLookupValues",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "evaluationDate",
            "in": "query",
            "description": "The evaluation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "lookupKeys",
            "in": "query",
            "description": "The lookup-value keys filter (case-insensitive, default is all)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "lookupNames",
            "in": "query",
            "description": "The lookup names filter (case-insensitive, default is all)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "regulationDate",
            "in": "query",
            "description": "The regulation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LookupValue"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls/{payrollId}/lookups/data": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get payroll lookup data",
        "operationId": "GetPayrollLookupData",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lookupNames",
            "in": "query",
            "description": "The lookup names (case-insensitive)",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "The content culture",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evaluationDate",
            "in": "query",
            "description": "The evaluation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "regulationDate",
            "in": "query",
            "description": "The regulation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LookupData"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls/{payrollId}/lookups/values/data": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get payroll lookup value data",
        "operationId": "GetPayrollLookupValueData",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lookupName",
            "in": "query",
            "description": "The lookup name (case-insensitive)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "The content culture",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evaluationDate",
            "in": "query",
            "description": "The evaluation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "lookupKey",
            "in": "query",
            "description": "The lookup key, optionally with range value",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rangeValue",
            "in": "query",
            "description": "The lookup range value",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "regulationDate",
            "in": "query",
            "description": "The regulation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupValueData"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls/{payrollId}/reports": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get payroll report sets",
        "operationId": "GetPayrollReports",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "clusterSetName",
            "in": "query",
            "description": "The cluster set name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evaluationDate",
            "in": "query",
            "description": "The evaluation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "overrideType",
            "in": "query",
            "description": "The override type filter (default: active)",
            "schema": {
              "$ref": "#/components/schemas/OverrideType"
            }
          },
          {
            "name": "regulationDate",
            "in": "query",
            "description": "The regulation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "reportNames",
            "in": "query",
            "description": "The report names filter (case-insensitive, default is all)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportSet"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls/{payrollId}/reports/parameters": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get payroll report parameters",
        "operationId": "GetPayrollReportParameters",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "evaluationDate",
            "in": "query",
            "description": "The evaluation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "regulationDate",
            "in": "query",
            "description": "The regulation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "reportNames",
            "in": "query",
            "description": "The report names (case-insensitive, default is all)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportParameter"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls/{payrollId}/reports/templates": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get payroll report templates",
        "operationId": "GetPayrollReportTemplates",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "The report culture (default is all)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evaluationDate",
            "in": "query",
            "description": "The evaluation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "regulationDate",
            "in": "query",
            "description": "The regulation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "reportNames",
            "in": "query",
            "description": "The report names (case-insensitive, default is all)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportTemplate"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls/{payrollId}/scripts": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get payroll scripts",
        "operationId": "GetPayrollScripts",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "evaluationDate",
            "in": "query",
            "description": "The evaluation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "overrideType",
            "in": "query",
            "description": "The override type filter (default: active)",
            "schema": {
              "$ref": "#/components/schemas/OverrideType"
            }
          },
          {
            "name": "regulationDate",
            "in": "query",
            "description": "The regulation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "scriptNames",
            "in": "query",
            "description": "The script names filter (case-insensitive, default is all)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Script"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls/{payrollId}/actions": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get payroll script actions",
        "operationId": "GetPayrollScriptActions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "evaluationDate",
            "in": "query",
            "description": "The evaluation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "functionType",
            "in": "query",
            "description": "The function type (default: all)",
            "schema": {
              "$ref": "#/components/schemas/FunctionType"
            }
          },
          {
            "name": "overrideType",
            "in": "query",
            "description": "The override type filter (default: active)",
            "schema": {
              "$ref": "#/components/schemas/OverrideType"
            }
          },
          {
            "name": "regulationDate",
            "in": "query",
            "description": "The regulation date (default: UTC now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "scriptNames",
            "in": "query",
            "description": "The script names filter (case-insensitive, default is all)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionInfo"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payrolls/{payrollId}/attributes/{attributeName}": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get a payroll attribute",
        "operationId": "GetPayrollAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Set a payroll attribute",
        "operationId": "SetPayrollAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The attribute value as JSON",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Delete a payroll attribute",
        "operationId": "DeletePayrollAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrollId",
            "in": "path",
            "description": "The payroll id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payruns/jobs": {
      "get": {
        "tags": [
          "Payrun jobs"
        ],
        "summary": "Query payrun jobs",
        "operationId": "QueryPayrunJobs",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Payrun jobs"
        ],
        "summary": "Start a new payrun job",
        "operationId": "StartPayrunJob",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The payrun job invocation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrunJobInvocation"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrunJobInvocation"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PayrunJobInvocation"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrunJob"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Payrun jobs"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payruns/jobs/employees/{employeeId}": {
      "get": {
        "tags": [
          "Payrun jobs"
        ],
        "summary": "Get employee payrun jobs",
        "operationId": "QueryEmployeePayrunJobs",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "The employee id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payruns/jobs/{payrunJobId}": {
      "get": {
        "tags": [
          "Payrun jobs"
        ],
        "summary": "Get a payrun job",
        "operationId": "GetPayrunJob",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrunJobId",
            "in": "path",
            "description": "The id of the payrun job",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrunJob"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Payrun jobs"
        ],
        "summary": "Delete a payrun jobs including all payroll results",
        "operationId": "DeletePayrunJob",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrunJobId",
            "in": "path",
            "description": "The id of the payrun jobs",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payruns/jobs/{payrunJobId}/status": {
      "get": {
        "tags": [
          "Payrun jobs"
        ],
        "summary": "Get status of a payrun job",
        "operationId": "GetPayrunJobStatus",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrunJobId",
            "in": "path",
            "description": "The payrun job id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Payrun jobs"
        ],
        "summary": "Change the status of a payrun job",
        "operationId": "ChangePayrunJobStatus",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrunJobId",
            "in": "path",
            "description": "The payrun job id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "The user id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "description": "The change reason",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "patchMode",
            "in": "query",
            "description": "Use the patch mode",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "The new payrun job status",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrunJobStatus"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrunJobStatus"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PayrunJobStatus"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payruns/jobs/{payrunJobId}/attributes/{attributeName}": {
      "get": {
        "tags": [
          "Payrun jobs"
        ],
        "summary": "Get a payrun job attribute",
        "operationId": "GetPayrunJobAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrunJobId",
            "in": "path",
            "description": "The id of the payrun job",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Payrun jobs"
        ],
        "summary": "Set a payrun job attribute",
        "operationId": "SetPayrunJobAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrunJobId",
            "in": "path",
            "description": "The id of the payrun job",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The attribute value as JSON",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Payrun jobs"
        ],
        "summary": "Delete a payrun job attribute",
        "operationId": "DeletePayrunJobAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrunJobId",
            "in": "path",
            "description": "The id of the payrun job",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payruns/{payrunId}/parameters": {
      "get": {
        "tags": [
          "Payrun parameters"
        ],
        "summary": "Query payrun parameters",
        "operationId": "QueryPayrunParameters",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrunId",
            "in": "path",
            "description": "The payrun id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Payrun parameters"
        ],
        "summary": "Add a new payrun parameter",
        "operationId": "CreatePayrunParameter",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrunId",
            "in": "path",
            "description": "The payrun id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The payrun parameter to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrunParameter"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrunParameter"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PayrunParameter"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrunParameter"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Payrun parameters"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payrunId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payruns/{payrunId}/parameters/{parameterId}": {
      "get": {
        "tags": [
          "Payrun parameters"
        ],
        "summary": "Get a payrun parameter",
        "operationId": "GetPayrunParameter",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrunId",
            "in": "path",
            "description": "The payrun id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "parameterId",
            "in": "path",
            "description": "The id of the parameter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrunParameter"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Payrun parameters"
        ],
        "summary": "Update a payrun parameter",
        "operationId": "UpdatePayrun",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrunId",
            "in": "path",
            "description": "The payrun id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "parameterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The payrun parameter to modify",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrunParameter"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrunParameter"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PayrunParameter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrunParameter"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Payrun parameters"
        ],
        "summary": "Delete a payrun",
        "operationId": "DeletePayrun",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrunId",
            "in": "path",
            "description": "The payrun id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "parameterId",
            "in": "path",
            "description": "The id of the payrun parameter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payruns": {
      "get": {
        "tags": [
          "Payruns"
        ],
        "summary": "Query payruns",
        "operationId": "QueryPayruns",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Payruns"
        ],
        "summary": "Add a new payrun",
        "operationId": "CreatePayrun",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The payrun to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Payrun"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Payrun"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Payrun"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payrun"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Payruns"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payruns/{payrunId}": {
      "get": {
        "tags": [
          "Payruns"
        ],
        "summary": "Get a payrun",
        "operationId": "GetPayrun",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrunId",
            "in": "path",
            "description": "The id of the payrun",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payrun"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Payruns"
        ],
        "summary": "Update a payrun",
        "operationId": "UpdatePayrun",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrunId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The payrun with updated values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Payrun"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Payrun"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Payrun"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payrun"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Payruns"
        ],
        "summary": "Delete a payrun",
        "operationId": "DeletePayrun",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrunId",
            "in": "path",
            "description": "The id of the payrun",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/payruns/{payrunId}/rebuild": {
      "put": {
        "tags": [
          "Payruns"
        ],
        "summary": "Rebuild payrun",
        "operationId": "RebuildPayrun",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "payrunId",
            "in": "path",
            "description": "The id of the payrun",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/shares/regulations/{shareId}": {
      "get": {
        "tags": [
          "Regulation shares"
        ],
        "summary": "Get a regulation share",
        "operationId": "GetRegulationShare",
        "parameters": [
          {
            "name": "shareId",
            "in": "path",
            "description": "The regulation share id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegulationShare"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Regulation shares"
        ],
        "summary": "Update a regulation share",
        "operationId": "UpdateRegulationShare",
        "parameters": [
          {
            "name": "shareId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The regulation share with updated values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegulationShare"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegulationShare"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegulationShare"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegulationShare"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Regulation shares"
        ],
        "summary": "Delete a regulation share",
        "operationId": "DeleteRegulationShare",
        "parameters": [
          {
            "name": "shareId",
            "in": "path",
            "description": "The regulation share id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/shares/regulations": {
      "get": {
        "tags": [
          "Regulation shares"
        ],
        "summary": "Query regulation shares",
        "operationId": "QueryRegulationShares",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Regulation shares"
        ],
        "summary": "Add a new regulation share",
        "operationId": "CreateRegulationShare",
        "requestBody": {
          "description": "The regulation share to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegulationShare"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegulationShare"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegulationShare"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegulationShare"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Regulation shares"
        ],
        "operationId": "GetOptions",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/shares/regulations/{shareId}/attributes/{attributeName}": {
      "get": {
        "tags": [
          "Regulation shares"
        ],
        "summary": "Get a regulation share attribute",
        "operationId": "GetRegulationShareAttribute",
        "parameters": [
          {
            "name": "shareId",
            "in": "path",
            "description": "The regulation share id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Regulation shares"
        ],
        "summary": "Set a regulation share attribute",
        "operationId": "SetRegulationShareAttribute",
        "parameters": [
          {
            "name": "shareId",
            "in": "path",
            "description": "The regulation share id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The attribute value as JSON",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Regulation shares"
        ],
        "summary": "Delete a regulation share attribute",
        "operationId": "DeleteRegulationShareAttribute",
        "parameters": [
          {
            "name": "shareId",
            "in": "path",
            "description": "The regulation share id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations": {
      "get": {
        "tags": [
          "Regulations"
        ],
        "summary": "Query regulations",
        "operationId": "QueryRegulations",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Regulations"
        ],
        "summary": "Add a new regulation",
        "operationId": "CreateRegulation",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The regulation to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Regulation"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Regulation"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Regulation"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Regulation"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Regulations"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}": {
      "get": {
        "tags": [
          "Regulations"
        ],
        "summary": "Get a regulation",
        "operationId": "GetRegulation",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Regulation"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Regulations"
        ],
        "summary": "Update a regulation",
        "operationId": "UpdateRegulation",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The regulation id",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Regulation"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Regulation"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Regulation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Regulation"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Regulations"
        ],
        "summary": "Delete a regulation",
        "operationId": "DeleteRegulation",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/cases/{caseFieldName}": {
      "get": {
        "tags": [
          "Regulations"
        ],
        "summary": "Get case name by case field",
        "operationId": "GetCaseOfCaseField",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "caseFieldName",
            "in": "path",
            "description": "The case field name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/attributes/{attributeName}": {
      "get": {
        "tags": [
          "Regulations"
        ],
        "summary": "Get a regulation attribute",
        "operationId": "GetRegulationAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The id of the regulation",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Regulations"
        ],
        "summary": "Set a regulation attribute",
        "operationId": "SetRegulationAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The id of the regulation",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The attribute value as JSON",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Regulations"
        ],
        "summary": "Delete a regulation attribute",
        "operationId": "DeleteRegulationAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The id of the regulation",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/reports/{reportId}/audits": {
      "get": {
        "tags": [
          "Report audits"
        ],
        "summary": "Query regulation report audits",
        "operationId": "QueryReportAudits",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The id of the report",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Report audits"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/reports/{reportId}/audits/{auditId}": {
      "get": {
        "tags": [
          "Report audits"
        ],
        "summary": "Get a regulation report audit",
        "operationId": "GetReportAudit",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The report id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "auditId",
            "in": "path",
            "description": "The audit object id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportAudit"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/reportlogs": {
      "get": {
        "tags": [
          "Report logs"
        ],
        "summary": "Query report logs",
        "operationId": "QueryReportLogs",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Report logs"
        ],
        "summary": "Add a new report log",
        "operationId": "CreateReportLog",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The report log to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportLog"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportLog"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportLog"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportLog"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Report logs"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/reportlogs/{logId}": {
      "get": {
        "tags": [
          "Report logs"
        ],
        "summary": "Get a report log",
        "operationId": "GetReportLog",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "logId",
            "in": "path",
            "description": "The id of the log",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportLog"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Report logs"
        ],
        "summary": "Delete a report log",
        "operationId": "DeleteReportLog",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "logId",
            "in": "path",
            "description": "The id of the report log",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/reports/{reportId}/parameters/{parameterId}/audits": {
      "get": {
        "tags": [
          "Report parameter audits"
        ],
        "summary": "Query regulation report parameter audits",
        "operationId": "QueryReportParameterAudits",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The id of the report",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "parameterId",
            "in": "path",
            "description": "The id of the report parameter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Report parameter audits"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parameterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/reports/{reportId}/parameters/{parameterId}/audits/{auditId}": {
      "get": {
        "tags": [
          "Report parameter audits"
        ],
        "summary": "Get a regulation report parameter audit",
        "operationId": "GetReportParameterAudit",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The id of the report",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "parameterId",
            "in": "path",
            "description": "The report parameter id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "auditId",
            "in": "path",
            "description": "The audit object id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportParameterAudit"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/reports/{reportId}/parameters": {
      "get": {
        "tags": [
          "Report parameters"
        ],
        "summary": "Query report parameters",
        "operationId": "QueryReportParameters",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The report id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Report parameters"
        ],
        "summary": "Add a new report parameter",
        "operationId": "CreateReportParameter",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The report id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The report parameter to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportParameter"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportParameter"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportParameter"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportParameter"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Report parameters"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/reports/{reportId}/parameters/{parameterId}": {
      "get": {
        "tags": [
          "Report parameters"
        ],
        "summary": "Get a report parameter",
        "operationId": "GetReportParameter",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The report id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "parameterId",
            "in": "path",
            "description": "The id of the parameter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportParameter"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Report parameters"
        ],
        "summary": "Update a report parameter",
        "operationId": "UpdateReportParameter",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The report id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "parameterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The report parameter to modify",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportParameter"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportParameter"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportParameter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportParameter"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Report parameters"
        ],
        "summary": "Delete a report",
        "operationId": "DeleteReportParameter",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The report id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "parameterId",
            "in": "path",
            "description": "The id of the report parameter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/reports/{reportId}/templates/{templateId}/audits": {
      "get": {
        "tags": [
          "Report template audits"
        ],
        "summary": "Query regulation report template audits",
        "operationId": "QueryReportTemplateAudits",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The id of the report",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "The id of the report template",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Report template audits"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/reports/{reportId}/templates/{templateId}/audits/{auditId}": {
      "get": {
        "tags": [
          "Report template audits"
        ],
        "summary": "Get a regulation report template audit",
        "operationId": "GetReportTemplateAudit",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The id of the report",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "The report template id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "auditId",
            "in": "path",
            "description": "The audit object id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportTemplateAudit"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/reports/{reportId}/templates": {
      "get": {
        "tags": [
          "Report templates"
        ],
        "summary": "Query report templates",
        "operationId": "QueryReportTemplates",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The report id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Report culture",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeContent",
            "in": "query",
            "description": "Exclude report content",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Report templates"
        ],
        "summary": "Add a new report template",
        "operationId": "CreateReportTemplate",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The report id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The report template to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportTemplate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportTemplate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportTemplate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportTemplate"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Report templates"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/reports/{reportId}/templates/{templateId}": {
      "get": {
        "tags": [
          "Report templates"
        ],
        "summary": "Get a report template",
        "operationId": "GetReportTemplate",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The report id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "The id of the template",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportTemplate"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Report templates"
        ],
        "summary": "Update a report template",
        "operationId": "UpdateReportTemplate",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The report id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The report template to modify",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportTemplate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportTemplate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportTemplate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportTemplate"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Report templates"
        ],
        "summary": "Delete a report",
        "operationId": "DeleteReportTemplate",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The report id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "The id of the report template",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/reports": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Query reports",
        "operationId": "QueryReports",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Add a new report",
        "operationId": "CreateReport",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The report to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Report"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Report"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Report"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Reports"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/reports/{reportId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get a report",
        "operationId": "GetReport",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The id of the report",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Reports"
        ],
        "summary": "Update a report",
        "operationId": "UpdateReport",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The report with updated values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Report"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Report"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Report"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Reports"
        ],
        "summary": "Delete a report",
        "operationId": "DeleteReport",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The id of the report",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/reports/{reportId}/execute": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Execute a report",
        "description": "Request body contains array of case values (optional)\r\nWithout the request body, this would be a GET method",
        "operationId": "ExecuteReport",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The id of the report",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The report execute request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/reports/sets/{reportId}": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Get a report set",
        "description": "Request body contains array of case values (optional)\r\nWithout the request body, this would be a GET method",
        "operationId": "GetReportSet",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The id of the report",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The report execute request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportSet"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Reports"
        ],
        "summary": "Delete a report set",
        "operationId": "DeleteReportSet",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The id of the report",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/reports/sets": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Add a new report set",
        "operationId": "CreateReportSet",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The report set to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportSet"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportSet"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportSet"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportSet"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/reports/{reportId}/rebuild": {
      "put": {
        "tags": [
          "Reports"
        ],
        "summary": "Rebuild regulation report",
        "operationId": "RebuildReport",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The id of the report",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/reports/{reportId}/attributes/{attributeName}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get a report attribute",
        "operationId": "GetReportAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The id of the report",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Set a report attribute",
        "operationId": "SetReportAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The id of the report",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The attribute value as JSON",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Reports"
        ],
        "summary": "Delete a report attribute",
        "operationId": "DeleteReportAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The id of the report",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/scripts/{scriptId}/audits": {
      "get": {
        "tags": [
          "Script audits"
        ],
        "summary": "Query regulation script audits",
        "operationId": "QueryScriptAudits",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "scriptId",
            "in": "path",
            "description": "The script id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Script audits"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scriptId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/scripts/{scriptId}/audits/{auditId}": {
      "get": {
        "tags": [
          "Script audits"
        ],
        "summary": "Get a regulation script audit",
        "operationId": "GetScriptAudit",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "scriptId",
            "in": "path",
            "description": "The script id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "auditId",
            "in": "path",
            "description": "The audit object id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptAudit"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/scripts": {
      "get": {
        "tags": [
          "Scripts"
        ],
        "summary": "Query regulation scripts",
        "operationId": "QueryScripts",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Scripts"
        ],
        "summary": "Add a new regulation script",
        "operationId": "CreateScript",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The script to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Script"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Script"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Script"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Script"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Scripts"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/scripts/{scriptId}": {
      "get": {
        "tags": [
          "Scripts"
        ],
        "summary": "Get a regulation script",
        "operationId": "GetScript",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "scriptId",
            "in": "path",
            "description": "The script id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Script"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Scripts"
        ],
        "summary": "Update a regulation script",
        "operationId": "UpdateScript",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "scriptId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The script with updated values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Script"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Script"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Script"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Script"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Scripts"
        ],
        "summary": "Delete a regulation script",
        "operationId": "DeleteScript",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "scriptId",
            "in": "path",
            "description": "The script id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/tasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Query tasks",
        "operationId": "QueryTasks",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Add a new task",
        "operationId": "CreateTask",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The task to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Tasks"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/tasks/{taskId}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get a task",
        "operationId": "GetTask",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "Update a task",
        "operationId": "UpdateTask",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The task with updated values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "Delete a task",
        "operationId": "DeleteTask",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/tasks/{taskId}/attributes/{attributeName}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get a task attribute",
        "operationId": "GetTaskAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Set a task attribute",
        "operationId": "SetTaskAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The attribute value as JSON",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "Delete a task attribute",
        "operationId": "DeleteTaskAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Query tenants",
        "operationId": "QueryTenants",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Add a new tenant",
        "description": "No authorization check",
        "operationId": "CreateTenant",
        "requestBody": {
          "description": "The tenant to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tenant"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Tenant"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Tenant"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Tenants"
        ],
        "operationId": "GetOptions",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}": {
      "put": {
        "tags": [
          "Tenants"
        ],
        "summary": "Update a tenant",
        "description": "No authorization check",
        "operationId": "UpdateTenant",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The tenant with updated values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tenant"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Tenant"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Tenant"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tenants"
        ],
        "summary": "Delete a tenant including all tenant data",
        "description": "No authorization check",
        "operationId": "DeleteTenant",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get a tenant",
        "description": "No authorization check",
        "operationId": "GetTenant",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/shared/regulations": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get tenant shared regulations",
        "operationId": "GetTenantSharedRegulations",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "divisionId",
            "in": "query",
            "description": "The division id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Regulation"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/actions": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get the system script actions",
        "operationId": "GetSystemScriptActions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "functionType",
            "in": "query",
            "description": "The function type",
            "schema": {
              "$ref": "#/components/schemas/FunctionType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/queries": {
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Execute a report query",
        "description": "Request body contains array of case values (optional)\r\nWithout the request body, this would be a GET method",
        "operationId": "ExecuteReportQuery",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "The data culture",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "methodName",
            "in": "query",
            "description": "The query method",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The query parameters",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataTable"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/attributes/{attributeName}": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get a tenant attribute",
        "operationId": "GetTenantAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Set a tenant attribute",
        "operationId": "SetTenantAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The attribute value as JSON",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tenants"
        ],
        "summary": "Delete a tenant attribute",
        "operationId": "DeleteTenantAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Query users",
        "operationId": "QueryUsers",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add a new user",
        "operationId": "CreateUser",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The user to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Users"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user",
        "operationId": "GetUser",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user",
        "operationId": "UpdateUser",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The user with updated values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/users/{userId}/password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Test the user password",
        "description": "Request body contains array of case values (optional)\r\nWithout the request body, this would be a GET method",
        "operationId": "TestUserPassword",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The password to test",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update the user password\r\nChange request use cases:\r\n- set initial password: new=required, existing=ignored\r\n- change existing password: new=required, existing=required\r\n- reset password: new=null, existing=required",
        "operationId": "UpdateUserPassword",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The password change request including the new and existing password",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordChangeRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordChangeRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordChangeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/users/{userId}/attributes/{attributeName}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user attribute",
        "operationId": "GetUserAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Set a user attribute",
        "operationId": "SetUserAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The attribute value as JSON",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user attribute",
        "operationId": "DeleteUserAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/wagetypes/{wageTypeId}/audits": {
      "get": {
        "tags": [
          "Wage type audits"
        ],
        "summary": "Query regulation wage type audits",
        "operationId": "QueryWageTypeAudits",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "wageTypeId",
            "in": "path",
            "description": "The id of the wage type",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Wage type audits"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wageTypeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/wagetypes/{wageTypeId}/audits/{auditId}": {
      "get": {
        "tags": [
          "Wage type audits"
        ],
        "summary": "Get a regulation wage type audit",
        "operationId": "GetWageTypeAudit",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "wageTypeId",
            "in": "path",
            "description": "The wage type id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "auditId",
            "in": "path",
            "description": "The audit object id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WageTypeAudit"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/wagetypes": {
      "get": {
        "tags": [
          "Wage types"
        ],
        "summary": "Query regulation wage types",
        "operationId": "QueryWageTypes",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Wage types"
        ],
        "summary": "Add a new regulation wage type",
        "operationId": "CreateWageType",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The wage type to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WageType"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WageType"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WageType"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WageType"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Wage types"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/wagetypes/{wageTypeId}": {
      "get": {
        "tags": [
          "Wage types"
        ],
        "summary": "Get a regulation wageType",
        "operationId": "GetWageType",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "wageTypeId",
            "in": "path",
            "description": "The wage type id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WageType"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Wage types"
        ],
        "summary": "Update a regulation wage type",
        "operationId": "UpdateWageType",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "wageTypeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The wage type with updated values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WageType"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WageType"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WageType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WageType"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Wage types"
        ],
        "summary": "Delete a regulation wage type",
        "operationId": "DeleteWageType",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "wageTypeId",
            "in": "path",
            "description": "The id of the wage type",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/regulations/{regulationId}/wagetypes/{wageTypeId}/rebuild": {
      "put": {
        "tags": [
          "Wage types"
        ],
        "summary": "Rebuild regulation wage type",
        "operationId": "RebuildWageType",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "regulationId",
            "in": "path",
            "description": "The regulation id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "wageTypeId",
            "in": "path",
            "description": "The id of the wage type",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/webhooks/{webhookId}/messages": {
      "get": {
        "tags": [
          "Webhook messages"
        ],
        "summary": "Query webhook messages",
        "operationId": "QueryWebhookMessages",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "The web hook id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Webhook messages"
        ],
        "summary": "Add a new webhook messages",
        "operationId": "CreateWebhookMessage",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "The id of the web hook",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The webhook messages to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookMessage"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookMessage"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookMessage"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Webhook messages"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/webhooks/{webhookId}/messages/{webhookMessageId}": {
      "get": {
        "tags": [
          "Webhook messages"
        ],
        "summary": "Get a webhook message",
        "operationId": "GetWebhookMessage",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "The webhook id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "webhookMessageId",
            "in": "path",
            "description": "The id of the webhook message",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Webhook messages"
        ],
        "summary": "Update a webhook messages",
        "operationId": "UpdateWebhookMessage",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "The webhook id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "webhookMessageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The webhook messages with updated values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookMessage"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookMessage"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Webhook messages"
        ],
        "summary": "Delete a webhook messages",
        "operationId": "DeleteWebhookMessage",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "The webhook id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "webhookMessageId",
            "in": "path",
            "description": "The id of the webhook messages",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Query webhooks",
        "operationId": "QueryWebhooks",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The OData filter expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The OData order-by expression (with support for attribute fields)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "The query result type: items, count or items with count (default: result items)",
            "schema": {
              "$ref": "#/components/schemas/QueryResultType"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "The OData field selection expression",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items in the queried collection that are to be skipped",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The object status (default: all status)",
            "schema": {
              "$ref": "#/components/schemas/ObjectStatus"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of items in the queried collection",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Add a new webhook",
        "operationId": "CreateWebhook",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The webhook to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Webhook"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Webhook"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Webhook"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Webhooks"
        ],
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/webhooks/{webhookId}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get a webhook",
        "operationId": "GetWebhook",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "The id of the webhook",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update a webhook",
        "operationId": "UpdateWebhook",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The webhook with updated values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Webhook"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Webhook"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Webhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete a webhook",
        "operationId": "DeleteWebhook",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "The id of the webhook",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/webhooks/{webhookId}/attributes/{attributeName}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get a webhook attribute",
        "operationId": "GetWebhookAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "The id of the webhook",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Set a webhook attribute",
        "operationId": "SetWebhookAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "The id of the webhook",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The attribute value as JSON",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete a webhook attribute",
        "operationId": "DeleteWebhookAttribute",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "The id of the webhook",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "The attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActionInfo": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The action name"
          },
          "functionType": {
            "$ref": "#/components/schemas/FunctionType"
          },
          "namespace": {
            "type": "string",
            "description": "The action namespace",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The action description",
            "nullable": true
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The action categories",
            "nullable": true
          },
          "source": {
            "$ref": "#/components/schemas/ActionSource"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionParameterInfo"
            },
            "description": "The action parameters",
            "nullable": true
          },
          "issues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionIssueInfo"
            },
            "description": "The action issues",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Action info"
      },
      "ActionIssueInfo": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The action name"
          },
          "message": {
            "type": "string",
            "description": "The action issue message",
            "nullable": true
          },
          "parameterCount": {
            "type": "integer",
            "description": "The action issue description",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Action issue info"
      },
      "ActionParameterInfo": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The action parameter name"
          },
          "description": {
            "type": "string",
            "description": "The action parameter description",
            "nullable": true
          },
          "valueTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The action parameter types",
            "nullable": true
          },
          "valueSources": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The action parameter source types",
            "nullable": true
          },
          "valueReferences": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The action parameter reference types",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Action parameter info"
      },
      "ActionSource": {
        "enum": [
          "Script",
          "System"
        ],
        "type": "string",
        "description": "The action source"
      },
      "Assembly": {
        "type": "object",
        "properties": {
          "definedTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "exportedTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "nullable": true,
            "readOnly": true
          },
          "codeBase": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "entryPoint": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "imageRuntimeVersion": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "isDynamic": {
            "type": "boolean",
            "readOnly": true
          },
          "location": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "reflectionOnly": {
            "type": "boolean",
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "isFullyTrusted": {
            "type": "boolean",
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "escapedCodeBase": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "manifestModule": {
            "$ref": "#/components/schemas/Module"
          },
          "modules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Module"
            },
            "nullable": true,
            "readOnly": true
          },
          "globalAssemblyCache": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "hostContext": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "securityRuleSet": {
            "$ref": "#/components/schemas/SecurityRuleSet"
          }
        },
        "additionalProperties": false
      },
      "Calendar": {
        "required": [
          "cycleTimeUnit",
          "name",
          "periodTimeUnit"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The division name"
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized division names",
            "nullable": true
          },
          "cycleTimeUnit": {
            "$ref": "#/components/schemas/CalendarTimeUnit"
          },
          "periodTimeUnit": {
            "$ref": "#/components/schemas/CalendarTimeUnit"
          },
          "timeMap": {
            "$ref": "#/components/schemas/CalendarTimeMap"
          },
          "firstMonthOfYear": {
            "$ref": "#/components/schemas/Month"
          },
          "periodDayCount": {
            "type": "number",
            "description": "Override the effective period day count",
            "format": "double",
            "nullable": true
          },
          "yearWeekRule": {
            "$ref": "#/components/schemas/CalendarWeekRule"
          },
          "firstDayOfWeek": {
            "$ref": "#/components/schemas/DayOfWeek"
          },
          "weekMode": {
            "$ref": "#/components/schemas/CalendarWeekMode"
          },
          "workMonday": {
            "type": "boolean",
            "description": "Work on monday"
          },
          "workTuesday": {
            "type": "boolean",
            "description": "Work on tuesday"
          },
          "workWednesday": {
            "type": "boolean",
            "description": "Work on wednesday"
          },
          "workThursday": {
            "type": "boolean",
            "description": "Work on thursday"
          },
          "workFriday": {
            "type": "boolean",
            "description": "Work on friday"
          },
          "workSaturday": {
            "type": "boolean",
            "description": "Work on saturday"
          },
          "workSunday": {
            "type": "boolean",
            "description": "Work on sunday"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The division API object"
      },
      "CalendarTimeMap": {
        "enum": [
          "Period",
          "Cycle"
        ],
        "type": "string",
        "description": "The calendar time map"
      },
      "CalendarTimeUnit": {
        "enum": [
          "Year",
          "SemiYear",
          "Quarter",
          "BiMonth",
          "CalendarMonth",
          "LunisolarMonth",
          "SemiMonth",
          "BiWeek",
          "Week"
        ],
        "type": "string",
        "description": "The calendar time unit"
      },
      "CalendarWeekMode": {
        "enum": [
          "Week",
          "WorkWeek"
        ],
        "type": "string",
        "description": "The calendar week mode"
      },
      "CalendarWeekRule": {
        "enum": [
          "FirstDay",
          "FirstFullWeek",
          "FirstFourDayWeek"
        ],
        "type": "string",
        "description": "Defines different rules for determining the first week of the year"
      },
      "CallingConventions": {
        "enum": [
          1,
          2,
          3,
          32,
          64
        ],
        "type": "integer",
        "format": "int32"
      },
      "Case": {
        "required": [
          "caseType",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "caseType": {
            "$ref": "#/components/schemas/CaseType"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The case name (immutable)"
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized case names",
            "nullable": true
          },
          "nameSynonyms": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Synonyms for the case name",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The case description",
            "nullable": true
          },
          "descriptionLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized case descriptions",
            "nullable": true
          },
          "defaultReason": {
            "type": "string",
            "description": "The default case change reason",
            "nullable": true
          },
          "defaultReasonLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized default case change reasons",
            "nullable": true
          },
          "baseCase": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The base case name",
            "nullable": true
          },
          "baseCaseFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CaseFieldReference"
            },
            "description": "The base case fields",
            "nullable": true
          },
          "overrideType": {
            "$ref": "#/components/schemas/OverrideType"
          },
          "cancellationType": {
            "$ref": "#/components/schemas/CaseCancellationType"
          },
          "hidden": {
            "type": "boolean",
            "description": "Hidden case (default: false)"
          },
          "availableExpression": {
            "type": "string",
            "description": "The expression used to build a case",
            "nullable": true
          },
          "buildExpression": {
            "type": "string",
            "description": "The expression used to build a case",
            "nullable": true
          },
          "validateExpression": {
            "type": "string",
            "description": "The case validate expression",
            "nullable": true
          },
          "lookups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case lookups",
            "nullable": true
          },
          "slots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CaseSlot"
            },
            "description": "The case slots",
            "nullable": true
          },
          "availableActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case available actions",
            "nullable": true
          },
          "buildActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case build actions",
            "nullable": true
          },
          "validateActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case validate actions",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          },
          "clusters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case clusters",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The regulation case API object"
      },
      "CaseAudit": {
        "required": [
          "caseId",
          "caseType",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "caseId": {
            "type": "integer",
            "description": "The case id",
            "format": "int32"
          },
          "caseType": {
            "$ref": "#/components/schemas/CaseType"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The case name (immutable)"
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized case names",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The case description",
            "nullable": true
          },
          "descriptionLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized case descriptions",
            "nullable": true
          },
          "overrideType": {
            "$ref": "#/components/schemas/OverrideType"
          },
          "cancellationType": {
            "$ref": "#/components/schemas/CaseCancellationType"
          },
          "baseCase": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The base case name",
            "nullable": true
          },
          "baseCaseFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CaseFieldReference"
            },
            "description": "The base case fields",
            "nullable": true
          },
          "availableExpression": {
            "type": "string",
            "description": "The expression used to build a case",
            "nullable": true
          },
          "buildExpression": {
            "type": "string",
            "description": "The expression used to build a case",
            "nullable": true
          },
          "validateExpression": {
            "type": "string",
            "description": "The case validate expression",
            "nullable": true
          },
          "lookups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The lookups",
            "nullable": true
          },
          "slots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CaseSlot"
            },
            "description": "The case slots",
            "nullable": true
          },
          "buildActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case build actions",
            "nullable": true
          },
          "validateActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case validate actions",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          },
          "clusters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case clusters",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The regulation case audit API object (immutable)"
      },
      "CaseCancellationType": {
        "enum": [
          "None",
          "Case"
        ],
        "type": "string",
        "description": "The cancellation type of a case"
      },
      "CaseChange": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "userId": {
            "type": "integer",
            "description": "The change user id",
            "format": "int32"
          },
          "employeeId": {
            "type": "integer",
            "description": "The employee id, mandatory for employee case changes (immutable)",
            "format": "int32",
            "nullable": true
          },
          "divisionId": {
            "type": "integer",
            "description": "The division id (immutable)\r\nIf present, this values overrides all case value divisions  PayrollEngine.Api.Model.CaseValue.DivisionId",
            "format": "int32",
            "nullable": true
          },
          "cancellationType": {
            "$ref": "#/components/schemas/CaseCancellationType"
          },
          "cancellationId": {
            "type": "integer",
            "description": "The cancellation case id (immutable)",
            "format": "int32",
            "nullable": true
          },
          "cancellationDate": {
            "type": "string",
            "description": "The cancellation date (immutable)",
            "format": "date-time",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "description": "The change reason",
            "nullable": true
          },
          "validationCaseName": {
            "type": "string",
            "description": "The validation case name, triggers the case validation (optional)",
            "nullable": true
          },
          "forecast": {
            "type": "string",
            "description": "The forecast name",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CaseValue"
            },
            "description": "The case values",
            "nullable": true
          },
          "ignoredValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CaseValue"
            },
            "description": "The ignored case values",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Case change with multiple case values of one case type"
      },
      "CaseChangeSetup": {
        "required": [
          "case",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "The change user id",
            "format": "int32"
          },
          "employeeId": {
            "type": "integer",
            "description": "The employee id, mandatory for employee case changes (immutable)",
            "format": "int32",
            "nullable": true
          },
          "divisionId": {
            "type": "integer",
            "description": "The division id (immutable)\r\nIf present, this values overrides all case value divisions  PayrollEngine.Api.Model.CaseValue.DivisionId",
            "format": "int32",
            "nullable": true
          },
          "cancellationId": {
            "type": "integer",
            "description": "The case to cancel, root case name specifies the target case",
            "format": "int32",
            "nullable": true
          },
          "forecast": {
            "type": "string",
            "description": "The forecast name",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "Case change created date",
            "format": "date-time",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "description": "The change reason",
            "nullable": true
          },
          "case": {
            "$ref": "#/components/schemas/CaseSetup"
          },
          "issues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CaseValidationIssue"
            },
            "description": "The case validation issues",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Case change setup"
      },
      "CaseDocument": {
        "required": [
          "content",
          "contentType",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The document name"
          },
          "content": {
            "minLength": 1,
            "type": "string",
            "description": "The document content"
          },
          "contentType": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The document content type"
          }
        },
        "additionalProperties": false,
        "description": "The case document API object"
      },
      "CaseField": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The case field name (immutable)"
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized case field names",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The case field description",
            "nullable": true
          },
          "descriptionLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized case field descriptions",
            "nullable": true
          },
          "valueType": {
            "$ref": "#/components/schemas/ValueType"
          },
          "valueScope": {
            "$ref": "#/components/schemas/ValueScope"
          },
          "timeType": {
            "$ref": "#/components/schemas/CaseFieldTimeType"
          },
          "timeUnit": {
            "$ref": "#/components/schemas/CaseFieldTimeUnit"
          },
          "periodAggregation": {
            "$ref": "#/components/schemas/CaseFieldAggregationType"
          },
          "overrideType": {
            "$ref": "#/components/schemas/OverrideType"
          },
          "cancellationMode": {
            "$ref": "#/components/schemas/CaseFieldCancellationMode"
          },
          "valueCreationMode": {
            "$ref": "#/components/schemas/CaseValueCreationMode"
          },
          "culture": {
            "type": "string",
            "description": "The case field culture name based on RFC 4646",
            "nullable": true
          },
          "valueMandatory": {
            "type": "boolean",
            "description": "Mandatory case field value"
          },
          "order": {
            "type": "integer",
            "description": "The case field order",
            "format": "int32"
          },
          "startDateType": {
            "$ref": "#/components/schemas/CaseFieldDateType"
          },
          "endDateType": {
            "$ref": "#/components/schemas/CaseFieldDateType"
          },
          "endMandatory": {
            "type": "boolean",
            "description": "The end date mandatory state"
          },
          "defaultStart": {
            "type": "string",
            "description": "The default start value of the case field (date or expression)",
            "nullable": true
          },
          "defaultEnd": {
            "type": "string",
            "description": "The default end value of the case field (date or expression)",
            "nullable": true
          },
          "defaultValue": {
            "type": "string",
            "description": "The default value of the case field (JSON format)",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case field tags",
            "nullable": true
          },
          "lookupSettings": {
            "$ref": "#/components/schemas/LookupSettings"
          },
          "clusters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case field clusters",
            "nullable": true
          },
          "buildActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case field build actions",
            "nullable": true
          },
          "validateActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case field validate actions",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          },
          "valueAttributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom value attributes",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The regulation case field API object"
      },
      "CaseFieldAggregationType": {
        "enum": [
          "Summary",
          "Last",
          "First"
        ],
        "type": "string",
        "description": "Aggregation type for a period case field PayrollEngine.CaseFieldTimeType.Period"
      },
      "CaseFieldAudit": {
        "required": [
          "caseFieldId",
          "mandatory",
          "name",
          "timeType",
          "timeUnit",
          "valueType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "caseFieldId": {
            "type": "integer",
            "description": "The case field id",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The case field name"
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized case field names",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The case field description",
            "nullable": true
          },
          "descriptionLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized case field descriptions",
            "nullable": true
          },
          "valueType": {
            "$ref": "#/components/schemas/ValueType"
          },
          "valueScope": {
            "$ref": "#/components/schemas/ValueScope"
          },
          "timeType": {
            "$ref": "#/components/schemas/CaseFieldTimeType"
          },
          "timeUnit": {
            "$ref": "#/components/schemas/CaseFieldTimeUnit"
          },
          "periodAggregation": {
            "$ref": "#/components/schemas/CaseFieldAggregationType"
          },
          "overrideType": {
            "$ref": "#/components/schemas/OverrideType"
          },
          "cancellationMode": {
            "$ref": "#/components/schemas/CaseFieldCancellationMode"
          },
          "culture": {
            "type": "string",
            "description": "The case field culture name based on RFC 4646",
            "nullable": true
          },
          "mandatory": {
            "type": "boolean",
            "description": "Mandatory case field"
          },
          "order": {
            "type": "integer",
            "description": "The case field order",
            "format": "int32"
          },
          "startDateType": {
            "$ref": "#/components/schemas/CaseFieldDateType"
          },
          "endDateType": {
            "$ref": "#/components/schemas/CaseFieldDateType"
          },
          "endMandatory": {
            "type": "boolean",
            "description": "The end date mandatory state"
          },
          "defaultStart": {
            "type": "string",
            "description": "The default start value of the case field (date or expression)",
            "nullable": true
          },
          "defaultEnd": {
            "type": "string",
            "description": "The default end value of the case field (date or expression)",
            "nullable": true
          },
          "defaultValue": {
            "type": "string",
            "description": "The default value of the case field (JSON format)",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case field tags",
            "nullable": true
          },
          "lookupSettings": {
            "$ref": "#/components/schemas/LookupSettings"
          },
          "clusters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case field clusters",
            "nullable": true
          },
          "buildActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case field build actions",
            "nullable": true
          },
          "validateActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case field validate actions",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          },
          "valueAttributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom value attributes",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The regulation case field audit API object (immutable)"
      },
      "CaseFieldCancellationMode": {
        "enum": [
          "TimeType",
          "Previous",
          "Keep",
          "Reset",
          "Invert"
        ],
        "type": "string",
        "description": "The cancellation mode for a regulation case field"
      },
      "CaseFieldDateType": {
        "enum": [
          "Day",
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday",
          "Month",
          "January",
          "February",
          "March",
          "April",
          "May",
          "June",
          "July",
          "August",
          "September",
          "October",
          "November",
          "December",
          "Year"
        ],
        "type": "string",
        "description": "The case field date type"
      },
      "CaseFieldReference": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The case field name",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "description": "The case field order",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Case field reference"
      },
      "CaseFieldSet": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The case field name (immutable)"
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized case field names",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The case field description",
            "nullable": true
          },
          "descriptionLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized case field descriptions",
            "nullable": true
          },
          "valueType": {
            "$ref": "#/components/schemas/ValueType"
          },
          "valueScope": {
            "$ref": "#/components/schemas/ValueScope"
          },
          "timeType": {
            "$ref": "#/components/schemas/CaseFieldTimeType"
          },
          "timeUnit": {
            "$ref": "#/components/schemas/CaseFieldTimeUnit"
          },
          "periodAggregation": {
            "$ref": "#/components/schemas/CaseFieldAggregationType"
          },
          "overrideType": {
            "$ref": "#/components/schemas/OverrideType"
          },
          "cancellationMode": {
            "$ref": "#/components/schemas/CaseFieldCancellationMode"
          },
          "valueCreationMode": {
            "$ref": "#/components/schemas/CaseValueCreationMode"
          },
          "culture": {
            "type": "string",
            "description": "The case field culture name based on RFC 4646",
            "nullable": true
          },
          "valueMandatory": {
            "type": "boolean",
            "description": "Mandatory case field value"
          },
          "order": {
            "type": "integer",
            "description": "The case field order",
            "format": "int32"
          },
          "startDateType": {
            "$ref": "#/components/schemas/CaseFieldDateType"
          },
          "endDateType": {
            "$ref": "#/components/schemas/CaseFieldDateType"
          },
          "endMandatory": {
            "type": "boolean",
            "description": "The end date mandatory state"
          },
          "defaultStart": {
            "type": "string",
            "description": "The default start value of the case field (date or expression)",
            "nullable": true
          },
          "defaultEnd": {
            "type": "string",
            "description": "The default end value of the case field (date or expression)",
            "nullable": true
          },
          "defaultValue": {
            "type": "string",
            "description": "The default value of the case field (JSON format)",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case field tags",
            "nullable": true
          },
          "lookupSettings": {
            "$ref": "#/components/schemas/LookupSettings"
          },
          "clusters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case field clusters",
            "nullable": true
          },
          "buildActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case field build actions",
            "nullable": true
          },
          "validateActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case field validate actions",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          },
          "valueAttributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom value attributes",
            "nullable": true
          },
          "displayName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The case field display name",
            "nullable": true
          },
          "caseSlot": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The case slot",
            "nullable": true
          },
          "caseSlotLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized case slots",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The case value (JSON format)",
            "nullable": true
          },
          "start": {
            "type": "string",
            "description": "The starting date for the value",
            "format": "date-time",
            "nullable": true
          },
          "end": {
            "type": "string",
            "description": "The ending date for the value",
            "format": "date-time",
            "nullable": true
          },
          "cancellationDate": {
            "type": "string",
            "description": "Cancellation date",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The case field including the slot and values"
      },
      "CaseFieldTimeType": {
        "enum": [
          "Timeless",
          "Moment",
          "Period",
          "CalendarPeriod"
        ],
        "type": "string",
        "description": "The time period type for a regulation case field"
      },
      "CaseFieldTimeUnit": {
        "enum": [
          "Day",
          "HalfDay",
          "Month"
        ],
        "type": "string",
        "description": "The date type for a regulation case field"
      },
      "CaseFieldValue": {
        "required": [
          "caseFieldName",
          "value"
        ],
        "type": "object",
        "properties": {
          "caseFieldName": {
            "minLength": 1,
            "type": "string",
            "description": "The case field name"
          },
          "caseFieldNameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized case field names",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The created date",
            "format": "date-time"
          },
          "start": {
            "type": "string",
            "description": "The period start date",
            "format": "date-time",
            "nullable": true
          },
          "end": {
            "type": "string",
            "description": "The period end date",
            "format": "date-time",
            "nullable": true
          },
          "valueType": {
            "$ref": "#/components/schemas/ValueType"
          },
          "value": {
            "minLength": 1,
            "type": "string",
            "description": "The case period value as JSON"
          },
          "cancellationDate": {
            "type": "string",
            "description": "Cancellation date",
            "format": "date-time",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case value tags",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Case field value"
      },
      "CaseIssueType": {
        "enum": [
          "Unknown",
          "CaseInvalid",
          "CaseUnknown",
          "CaseRelationInvalid",
          "CaseFieldDuplicated",
          "CaseValueIncomplete",
          "CaseValueMissing",
          "CaseValueStartInvalid",
          "CaseValueEndInvalid",
          "CaseValueEndMissing",
          "CaseValueWeekdayInvalid",
          "CaseValueMonthInvalid"
        ],
        "type": "string",
        "description": "The type of a case issue"
      },
      "CaseRelation": {
        "required": [
          "sourceCaseName",
          "targetCaseName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "sourceCaseName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The relation source case name (immutable)"
          },
          "sourceCaseNameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized source case names",
            "nullable": true
          },
          "sourceCaseSlot": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The relation source case slot",
            "nullable": true
          },
          "sourceCaseSlotLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized source case slots",
            "nullable": true
          },
          "targetCaseName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The relation target case name (immutable)"
          },
          "targetCaseNameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized target case names",
            "nullable": true
          },
          "targetCaseSlot": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The relation target case slot",
            "nullable": true
          },
          "targetCaseSlotLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized target case slots",
            "nullable": true
          },
          "buildExpression": {
            "type": "string",
            "description": "The expression used to build the case relation",
            "nullable": true
          },
          "validateExpression": {
            "type": "string",
            "description": "The expression which evaluates if the case relation is valid",
            "nullable": true
          },
          "overrideType": {
            "$ref": "#/components/schemas/OverrideType"
          },
          "order": {
            "type": "integer",
            "description": "The case relation order",
            "format": "int32"
          },
          "buildActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case relation build actions",
            "nullable": true
          },
          "validateActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case relation validate actions",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          },
          "clusters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case relation clusters",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The regulation case relation API object"
      },
      "CaseRelationAudit": {
        "required": [
          "caseRelationId",
          "sourceCaseName",
          "targetCaseName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "caseRelationId": {
            "type": "integer",
            "description": "The case relation id",
            "format": "int32"
          },
          "sourceCaseName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The relation source case name"
          },
          "sourceCaseNameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized source case names",
            "nullable": true
          },
          "sourceCaseSlot": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The relation source case slot",
            "nullable": true
          },
          "sourceCaseSlotLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized source case slots",
            "nullable": true
          },
          "targetCaseName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The relation target case name"
          },
          "targetCaseNameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized target case names",
            "nullable": true
          },
          "targetCaseSlot": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The relation target case slot",
            "nullable": true
          },
          "targetCaseSlotLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized target case slots",
            "nullable": true
          },
          "buildExpression": {
            "type": "string",
            "description": "The expression used to build the case relation",
            "nullable": true
          },
          "validateExpression": {
            "type": "string",
            "description": "The expression which evaluates if the case relation is valid",
            "nullable": true
          },
          "overrideType": {
            "$ref": "#/components/schemas/OverrideType"
          },
          "order": {
            "type": "integer",
            "description": "The case relation order",
            "format": "int32"
          },
          "buildActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case relation build actions",
            "nullable": true
          },
          "validateActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case relation validate actions",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          },
          "clusters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case relation clusters",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The API object of the regulation case relation audit (immutable)"
      },
      "CaseRelationReference": {
        "type": "object",
        "properties": {
          "sourceCaseName": {
            "type": "string",
            "description": "The relation source case name (immutable)",
            "nullable": true
          },
          "sourceCaseSlot": {
            "type": "string",
            "description": "The relation source case slot",
            "nullable": true
          },
          "targetCaseName": {
            "type": "string",
            "description": "The relation target case name (immutable)",
            "nullable": true
          },
          "targetCaseSlot": {
            "type": "string",
            "description": "The relation target case slot",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Case relation reference"
      },
      "CaseSet": {
        "required": [
          "caseType",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "caseType": {
            "$ref": "#/components/schemas/CaseType"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The case name (immutable)"
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized case names",
            "nullable": true
          },
          "nameSynonyms": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Synonyms for the case name",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The case description",
            "nullable": true
          },
          "descriptionLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized case descriptions",
            "nullable": true
          },
          "defaultReason": {
            "type": "string",
            "description": "The default case change reason",
            "nullable": true
          },
          "defaultReasonLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized default case change reasons",
            "nullable": true
          },
          "baseCase": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The base case name",
            "nullable": true
          },
          "baseCaseFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CaseFieldReference"
            },
            "description": "The base case fields",
            "nullable": true
          },
          "overrideType": {
            "$ref": "#/components/schemas/OverrideType"
          },
          "cancellationType": {
            "$ref": "#/components/schemas/CaseCancellationType"
          },
          "hidden": {
            "type": "boolean",
            "description": "Hidden case (default: false)"
          },
          "availableExpression": {
            "type": "string",
            "description": "The expression used to build a case",
            "nullable": true
          },
          "buildExpression": {
            "type": "string",
            "description": "The expression used to build a case",
            "nullable": true
          },
          "validateExpression": {
            "type": "string",
            "description": "The case validate expression",
            "nullable": true
          },
          "lookups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case lookups",
            "nullable": true
          },
          "slots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CaseSlot"
            },
            "description": "The case slots",
            "nullable": true
          },
          "availableActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case available actions",
            "nullable": true
          },
          "buildActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case build actions",
            "nullable": true
          },
          "validateActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case validate actions",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          },
          "clusters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case clusters",
            "nullable": true
          },
          "displayName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The case display name",
            "nullable": true
          },
          "caseSlot": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The case slot",
            "nullable": true
          },
          "caseSlotLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized case slots",
            "nullable": true
          },
          "cancellationDate": {
            "type": "string",
            "description": "Cancellation date",
            "format": "date-time",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CaseFieldSet"
            },
            "description": "Derived case fields",
            "nullable": true
          },
          "relatedCases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CaseSet"
            },
            "description": "Related cases",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The payroll case object, including case fields and related cases"
      },
      "CaseSetup": {
        "required": [
          "caseName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "caseName": {
            "minLength": 1,
            "type": "string",
            "description": "The case name"
          },
          "caseSlot": {
            "type": "string",
            "description": "The case slot",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CaseValueSetup"
            },
            "description": "The case value setups",
            "nullable": true
          },
          "relatedCases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CaseSetup"
            },
            "description": "The related cases",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Case setup"
      },
      "CaseSlot": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The case slot name"
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized case slot names",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Case slot"
      },
      "CaseType": {
        "enum": [
          "Global",
          "National",
          "Company",
          "Employee"
        ],
        "type": "string",
        "description": "The type of a case"
      },
      "CaseValidationIssue": {
        "required": [
          "caseName",
          "issueType",
          "message"
        ],
        "type": "object",
        "properties": {
          "issueType": {
            "$ref": "#/components/schemas/CaseIssueType"
          },
          "number": {
            "type": "integer",
            "description": "The issue number (negative issue type)",
            "format": "int32"
          },
          "caseName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Gets the name of the case"
          },
          "caseNameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized case names",
            "nullable": true
          },
          "caseSlot": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The case slot",
            "nullable": true
          },
          "caseSlotLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized case slot names",
            "nullable": true
          },
          "caseFieldName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Gets the name of the case field",
            "nullable": true
          },
          "caseFieldNameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized case field names",
            "nullable": true
          },
          "sourceCaseName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The relation source case name",
            "nullable": true
          },
          "sourceCaseNameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized source case names",
            "nullable": true
          },
          "sourceCaseSlot": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The relation source case slot",
            "nullable": true
          },
          "sourceCaseSlotLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized source case slots",
            "nullable": true
          },
          "targetCaseName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The relation target case name",
            "nullable": true
          },
          "targetCaseNameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized target case names",
            "nullable": true
          },
          "targetCaseSlot": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The relation target case slot",
            "nullable": true
          },
          "targetCaseSlotLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized target case slots",
            "nullable": true
          },
          "message": {
            "minLength": 1,
            "type": "string",
            "description": "Gets the validation message"
          }
        },
        "additionalProperties": false,
        "description": "Represents an issue from the case validation"
      },
      "CaseValue": {
        "required": [
          "caseFieldName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "divisionId": {
            "type": "integer",
            "description": "The division id (immutable)\r\nMandatory for case values with local value scope PayrollEngine.Api.Model.CaseField.ValueScope",
            "format": "int32",
            "nullable": true
          },
          "employeeId": {
            "type": "integer",
            "description": "The employee id, mandatory for employee case changes",
            "format": "int32",
            "nullable": true
          },
          "caseName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The associated case name",
            "nullable": true
          },
          "caseNameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized case names",
            "nullable": true
          },
          "caseFieldName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The associated case field name"
          },
          "caseFieldNameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized case field names",
            "nullable": true
          },
          "caseSlot": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The case slot",
            "nullable": true
          },
          "caseSlotLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized case slots",
            "nullable": true
          },
          "valueType": {
            "$ref": "#/components/schemas/ValueType"
          },
          "value": {
            "type": "string",
            "description": "The case value (JSON format)",
            "nullable": true
          },
          "numericValue": {
            "type": "number",
            "description": "The case numeric value",
            "format": "double",
            "nullable": true
          },
          "caseRelation": {
            "$ref": "#/components/schemas/CaseRelationReference"
          },
          "cancellationDate": {
            "type": "string",
            "description": "Cancellation date",
            "format": "date-time",
            "nullable": true
          },
          "start": {
            "type": "string",
            "description": "The starting date for the value",
            "format": "date-time",
            "nullable": true
          },
          "end": {
            "type": "string",
            "description": "The ending date for the value",
            "format": "date-time",
            "nullable": true
          },
          "forecast": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The forecast name",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case value tags",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The payroll case value API object (immutable)"
      },
      "CaseValueCreationMode": {
        "enum": [
          "OnChanges",
          "Always",
          "Discard"
        ],
        "type": "string",
        "description": "The case value creation mode"
      },
      "CaseValueSetup": {
        "required": [
          "caseFieldName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "divisionId": {
            "type": "integer",
            "description": "The division id (immutable)\r\nMandatory for case values with local value scope PayrollEngine.Api.Model.CaseField.ValueScope",
            "format": "int32",
            "nullable": true
          },
          "employeeId": {
            "type": "integer",
            "description": "The employee id, mandatory for employee case changes",
            "format": "int32",
            "nullable": true
          },
          "caseName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The associated case name",
            "nullable": true
          },
          "caseNameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized case names",
            "nullable": true
          },
          "caseFieldName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The associated case field name"
          },
          "caseFieldNameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized case field names",
            "nullable": true
          },
          "caseSlot": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The case slot",
            "nullable": true
          },
          "caseSlotLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized case slots",
            "nullable": true
          },
          "valueType": {
            "$ref": "#/components/schemas/ValueType"
          },
          "value": {
            "type": "string",
            "description": "The case value (JSON format)",
            "nullable": true
          },
          "numericValue": {
            "type": "number",
            "description": "The case numeric value",
            "format": "double",
            "nullable": true
          },
          "caseRelation": {
            "$ref": "#/components/schemas/CaseRelationReference"
          },
          "cancellationDate": {
            "type": "string",
            "description": "Cancellation date",
            "format": "date-time",
            "nullable": true
          },
          "start": {
            "type": "string",
            "description": "The starting date for the value",
            "format": "date-time",
            "nullable": true
          },
          "end": {
            "type": "string",
            "description": "The ending date for the value",
            "format": "date-time",
            "nullable": true
          },
          "forecast": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The forecast name",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The case value tags",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CaseDocument"
            },
            "description": "Case documents",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The payroll case value setup API object (immutable)"
      },
      "ClusterSet": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The filter name",
            "nullable": true
          },
          "includeClusters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The included clusters",
            "nullable": true
          },
          "excludeClusters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The excluded clusters",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Cluster set"
      },
      "CollectMode": {
        "enum": [
          "Summary",
          "Minimum",
          "Maximum",
          "Average",
          "Range",
          "Count"
        ],
        "type": "string",
        "description": "The collect mode"
      },
      "Collector": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The collector name (immutable)"
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized collector names",
            "nullable": true
          },
          "collectMode": {
            "$ref": "#/components/schemas/CollectMode"
          },
          "negated": {
            "type": "boolean",
            "description": "Negated collector result (immutable, default: false)"
          },
          "overrideType": {
            "$ref": "#/components/schemas/OverrideType"
          },
          "valueType": {
            "$ref": "#/components/schemas/ValueType"
          },
          "collectorGroups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Associated collector groups",
            "nullable": true
          },
          "threshold": {
            "type": "number",
            "description": "The threshold value",
            "format": "double",
            "nullable": true
          },
          "minResult": {
            "type": "number",
            "description": "The minimum allowed value",
            "format": "double",
            "nullable": true
          },
          "maxResult": {
            "type": "number",
            "description": "The maximum allowed value",
            "format": "double",
            "nullable": true
          },
          "startExpression": {
            "type": "string",
            "description": "Expression used while the collector is started",
            "nullable": true
          },
          "applyExpression": {
            "type": "string",
            "description": "Expression used while applying a value to the collector",
            "nullable": true
          },
          "endExpression": {
            "type": "string",
            "description": "Expression used while the collector is ended",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          },
          "clusters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The collector clusters",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The regulation collector API object"
      },
      "CollectorAudit": {
        "required": [
          "collectorId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "collectorId": {
            "type": "integer",
            "description": "The collector id",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The collector name",
            "nullable": true
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized collector names",
            "nullable": true
          },
          "collectMode": {
            "$ref": "#/components/schemas/CollectMode"
          },
          "negated": {
            "type": "boolean",
            "description": "Negated collector result"
          },
          "overrideType": {
            "$ref": "#/components/schemas/OverrideType"
          },
          "valueType": {
            "$ref": "#/components/schemas/ValueType"
          },
          "collectorGroups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Associated collector groups",
            "nullable": true
          },
          "startExpression": {
            "type": "string",
            "description": "Expression used while the collector is started",
            "nullable": true
          },
          "applyExpression": {
            "type": "string",
            "description": "Expression used while applying a value to the collector",
            "nullable": true
          },
          "endExpression": {
            "type": "string",
            "description": "Expression used while the collector is ended",
            "nullable": true
          },
          "threshold": {
            "type": "number",
            "description": "The threshold value",
            "format": "double",
            "nullable": true
          },
          "minResult": {
            "type": "number",
            "description": "The minimum allowed value",
            "format": "double",
            "nullable": true
          },
          "maxResult": {
            "type": "number",
            "description": "The maximum allowed value",
            "format": "double",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          },
          "clusters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The collector clusters",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The regulation collector audit API object (immutable)"
      },
      "CollectorCustomResult": {
        "required": [
          "collectorName",
          "end",
          "source",
          "start",
          "value",
          "valueType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "collectorResultId": {
            "type": "integer",
            "description": "The wage type result id (immutable)",
            "format": "int32"
          },
          "collectorName": {
            "minLength": 1,
            "type": "string",
            "description": "The collector name (immutable)"
          },
          "collectorNameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized collector names (immutable)",
            "nullable": true
          },
          "source": {
            "minLength": 1,
            "type": "string",
            "description": "The value source (immutable)"
          },
          "valueType": {
            "$ref": "#/components/schemas/ValueType"
          },
          "value": {
            "type": "number",
            "description": "The collector result value (immutable)",
            "format": "double"
          },
          "start": {
            "type": "string",
            "description": "The period starting date for the value",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "description": "The period ending date for the value",
            "format": "date-time"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The result tags",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "The result attributes (immutable)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The collector custom result API object"
      },
      "CollectorResult": {
        "required": [
          "collectMode",
          "collectorId",
          "collectorName",
          "end",
          "negated",
          "start",
          "value",
          "valueType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "payrollResultId": {
            "type": "integer",
            "description": "The payroll result id (immutable)",
            "format": "int32"
          },
          "collectorId": {
            "type": "integer",
            "description": "The collector id (immutable)",
            "format": "int32"
          },
          "collectorName": {
            "minLength": 1,
            "type": "string",
            "description": "The collector name (immutable)"
          },
          "collectorNameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized collector names (immutable)",
            "nullable": true
          },
          "collectMode": {
            "$ref": "#/components/schemas/CollectMode"
          },
          "negated": {
            "type": "boolean",
            "description": "Negated collector result (immutable)"
          },
          "valueType": {
            "$ref": "#/components/schemas/ValueType"
          },
          "value": {
            "type": "number",
            "description": "The collector result value (immutable)",
            "format": "double"
          },
          "start": {
            "type": "string",
            "description": "The starting date for the value (immutable)",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "description": "The ending date for the value (immutable)",
            "format": "date-time"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The result tags",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "The result attributes (immutable)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The collector result API object"
      },
      "CollectorResultSet": {
        "required": [
          "collectMode",
          "collectorId",
          "collectorName",
          "end",
          "negated",
          "start",
          "value",
          "valueType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "payrollResultId": {
            "type": "integer",
            "description": "The payroll result id (immutable)",
            "format": "int32"
          },
          "collectorId": {
            "type": "integer",
            "description": "The collector id (immutable)",
            "format": "int32"
          },
          "collectorName": {
            "minLength": 1,
            "type": "string",
            "description": "The collector name (immutable)"
          },
          "collectorNameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized collector names (immutable)",
            "nullable": true
          },
          "collectMode": {
            "$ref": "#/components/schemas/CollectMode"
          },
          "negated": {
            "type": "boolean",
            "description": "Negated collector result (immutable)"
          },
          "valueType": {
            "$ref": "#/components/schemas/ValueType"
          },
          "value": {
            "type": "number",
            "description": "The collector result value (immutable)",
            "format": "double"
          },
          "start": {
            "type": "string",
            "description": "The starting date for the value (immutable)",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "description": "The ending date for the value (immutable)",
            "format": "date-time"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The result tags",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "The result attributes (immutable)",
            "nullable": true
          },
          "customResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectorCustomResult"
            },
            "description": "The collector custom results (immutable)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The collector result set API object"
      },
      "ConsolidatedPayrollResult": {
        "type": "object",
        "properties": {
          "wageTypeResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WageTypeResultSet"
            },
            "description": "The wage type results",
            "nullable": true
          },
          "collectorResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectorResult"
            },
            "description": "The collector results",
            "nullable": true
          },
          "payrunResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayrunResult"
            },
            "description": "The payrun results",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A consolidated payroll result"
      },
      "ConstructorInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "attributes": {
            "$ref": "#/components/schemas/MethodAttributes"
          },
          "methodImplementationFlags": {
            "$ref": "#/components/schemas/MethodImplAttributes"
          },
          "callingConvention": {
            "$ref": "#/components/schemas/CallingConventions"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructor": {
            "type": "boolean",
            "readOnly": true
          },
          "isFinal": {
            "type": "boolean",
            "readOnly": true
          },
          "isHideBySig": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true
          },
          "isVirtual": {
            "type": "boolean",
            "readOnly": true
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "methodHandle": {
            "$ref": "#/components/schemas/RuntimeMethodHandle"
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeData": {
        "type": "object",
        "properties": {
          "attributeType": {
            "$ref": "#/components/schemas/Type"
          },
          "constructor": {
            "$ref": "#/components/schemas/ConstructorInfo"
          },
          "constructorArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeTypedArgument"
            },
            "nullable": true,
            "readOnly": true
          },
          "namedArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeNamedArgument"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeNamedArgument": {
        "type": "object",
        "properties": {
          "memberInfo": {
            "$ref": "#/components/schemas/MemberInfo"
          },
          "typedValue": {
            "$ref": "#/components/schemas/CustomAttributeTypedArgument"
          },
          "memberName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "isField": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeTypedArgument": {
        "type": "object",
        "properties": {
          "argumentType": {
            "$ref": "#/components/schemas/Type"
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataColumn": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Gets or sets the column name",
            "nullable": true
          },
          "expression": {
            "type": "string",
            "description": "Column expression used to filter rows",
            "nullable": true
          },
          "valueType": {
            "type": "string",
            "description": "Gets or sets the type of data stored in the column",
            "nullable": true
          },
          "valueBaseType": {
            "type": "string",
            "description": "Gets or sets the base type of data stored in the column",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a column in a DataTable"
      },
      "DataRelation": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Gets or sets the relation name",
            "nullable": true
          },
          "parentTable": {
            "type": "string",
            "description": "Gets or sets the relation parent table name",
            "nullable": true
          },
          "parentColumn": {
            "type": "string",
            "description": "Gets or sets the relation parent column names",
            "nullable": true
          },
          "childTable": {
            "type": "string",
            "description": "Gets or sets the relation child table name",
            "nullable": true
          },
          "childColumn": {
            "type": "string",
            "description": "Gets or sets the relation child column names",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a data relation in a DataTable"
      },
      "DataRow": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the row values (JSON, type matching to the column)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a row of data in a table"
      },
      "DataSet": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Gets or sets the data set name",
            "nullable": true
          },
          "tables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataTable"
            },
            "description": "Gets the collection of tables contained in the data set",
            "nullable": true
          },
          "relations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataRelation"
            },
            "description": "Gets the collection of table relations contained in the data set",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents an in-memory cache of data in tables"
      },
      "DataTable": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Gets or sets the table name",
            "nullable": true
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataColumn"
            },
            "description": "Gets the collection of columns that belong to this table",
            "nullable": true
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataRow"
            },
            "description": "Gets the collection of rows that belong to this table",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents one table of in-memory data"
      },
      "DatePeriod": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "description": "The period start",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "description": "The period end",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "A date period between the start and end date"
      },
      "DayOfWeek": {
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ],
        "type": "string",
        "description": "Specifies the day of the week"
      },
      "Division": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The division name"
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized division names",
            "nullable": true
          },
          "culture": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The division calendar (fallback: tenant calendar)",
            "nullable": true
          },
          "calendar": {
            "type": "string",
            "description": "The division calendar, fallback is the tenant calendar",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The division API object"
      },
      "DivisionScope": {
        "enum": [
          "All",
          "Local",
          "Global",
          "GlobalAndLocal"
        ],
        "type": "string",
        "description": "The division scope"
      },
      "Employee": {
        "required": [
          "firstName",
          "identifier",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "identifier": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The employee identifier"
          },
          "firstName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The first name of the employee"
          },
          "lastName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The last name of the employee"
          },
          "divisions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Employee division names",
            "nullable": true
          },
          "culture": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The employee culture name based on RFC 4646 (fallback: division culture)",
            "nullable": true
          },
          "calendar": {
            "type": "string",
            "description": "The employee calendar (fallback: division calendar)",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The employee API object"
      },
      "EventAttributes": {
        "enum": [
          0,
          512,
          1024
        ],
        "type": "integer",
        "format": "int32"
      },
      "EventInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "attributes": {
            "$ref": "#/components/schemas/EventAttributes"
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "addMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "removeMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "raiseMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "isMulticast": {
            "type": "boolean",
            "readOnly": true
          },
          "eventHandlerType": {
            "$ref": "#/components/schemas/Type"
          }
        },
        "additionalProperties": false
      },
      "Exception": {
        "type": "object",
        "properties": {
          "targetSite": {
            "$ref": "#/components/schemas/MethodBase"
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true,
            "readOnly": true
          },
          "innerException": {
            "$ref": "#/components/schemas/Exception"
          },
          "helpLink": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "type": "string",
            "nullable": true
          },
          "hResult": {
            "type": "integer",
            "format": "int32"
          },
          "stackTrace": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "FieldAttributes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          16,
          32,
          64,
          128,
          256,
          512,
          1024,
          4096,
          8192,
          32768,
          38144
        ],
        "type": "integer",
        "format": "int32"
      },
      "FieldInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "attributes": {
            "$ref": "#/components/schemas/FieldAttributes"
          },
          "fieldType": {
            "$ref": "#/components/schemas/Type"
          },
          "isInitOnly": {
            "type": "boolean",
            "readOnly": true
          },
          "isLiteral": {
            "type": "boolean",
            "readOnly": true
          },
          "isNotSerialized": {
            "type": "boolean",
            "readOnly": true
          },
          "isPinvokeImpl": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "fieldHandle": {
            "$ref": "#/components/schemas/RuntimeFieldHandle"
          }
        },
        "additionalProperties": false
      },
      "FunctionType": {
        "enum": [
          "CaseAvailable",
          "CaseBuild",
          "CaseValidate",
          "CaseChange",
          "Case",
          "CaseRelationBuild",
          "CaseRelationValidate",
          "CaseRelation",
          "CollectorStart",
          "CollectorApply",
          "CollectorEnd",
          "Collector",
          "WageTypeValue",
          "WageTypeResult",
          "WageType",
          "PayrunStart",
          "PayrunEmployeeAvailable",
          "PayrunEmployeeStart",
          "PayrunEmployeeEnd",
          "PayrunWageTypeAvailable",
          "PayrunEnd",
          "Payrun",
          "Payroll",
          "ReportBuild",
          "ReportStart",
          "ReportEnd",
          "Report",
          "All"
        ],
        "type": "string",
        "description": "The payroll function type"
      },
      "GenericParameterAttributes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          8,
          16,
          28
        ],
        "type": "integer",
        "format": "int32"
      },
      "ICustomAttributeProvider": {
        "type": "object",
        "additionalProperties": false
      },
      "IntPtr": {
        "type": "object",
        "additionalProperties": false
      },
      "LayoutKind": {
        "enum": [
          0,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "Log": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "level": {
            "$ref": "#/components/schemas/LogLevel"
          },
          "message": {
            "type": "string",
            "description": "The log message name (immutable)",
            "nullable": true
          },
          "user": {
            "type": "string",
            "description": "The log user (immutable)",
            "nullable": true
          },
          "error": {
            "type": "string",
            "description": "The log error (immutable)",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "The log comment (immutable)",
            "nullable": true
          },
          "owner": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The log owner (immutable)",
            "nullable": true
          },
          "ownerType": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The log owner type (immutable)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The log API object"
      },
      "LogLevel": {
        "enum": [
          "Verbose",
          "Debug",
          "Information",
          "Warning",
          "Error",
          "Fatal"
        ],
        "type": "string",
        "description": "Specifies the meaning and relative importance of a log event"
      },
      "Lookup": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The unique lookup name (immutable)"
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized lookup names",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The lookup description",
            "nullable": true
          },
          "descriptionLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized lookup descriptions",
            "nullable": true
          },
          "overrideType": {
            "$ref": "#/components/schemas/OverrideType"
          },
          "rangeSize": {
            "type": "number",
            "description": "The lookup range size",
            "format": "double",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The regulation lookup API object identified by his unique name.\r\nThe lookup contains one or more columns and the ValueColumn indicates\r\nthe column with the resulting value. ValueType specifies the type of the resulting value."
      },
      "LookupAudit": {
        "required": [
          "lookupId",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "lookupId": {
            "type": "integer",
            "description": "The lookup id",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The case field name"
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized lookup names",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The lookup description",
            "nullable": true
          },
          "descriptionLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized lookup descriptions",
            "nullable": true
          },
          "overrideType": {
            "$ref": "#/components/schemas/OverrideType"
          },
          "rangeSize": {
            "type": "number",
            "description": "The lookup range size",
            "format": "double",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The regulation lookup audit API object (immutable)"
      },
      "LookupData": {
        "required": [
          "name",
          "values"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The lookup name"
          },
          "culture": {
            "type": "string",
            "description": "The values culture",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LookupValueData"
            },
            "description": "The lookup values"
          },
          "rangeSize": {
            "type": "number",
            "description": "The lookup range size",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Localized lookup for UI cases like list/grid selections"
      },
      "LookupSet": {
        "required": [
          "name",
          "values"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The unique lookup name (immutable)"
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized lookup names",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The lookup description",
            "nullable": true
          },
          "descriptionLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized lookup descriptions",
            "nullable": true
          },
          "overrideType": {
            "$ref": "#/components/schemas/OverrideType"
          },
          "rangeSize": {
            "type": "number",
            "description": "The lookup range size",
            "format": "double",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LookupValue"
            },
            "description": "The lookup values"
          }
        },
        "additionalProperties": false,
        "description": "Lookup including the lookup value"
      },
      "LookupSettings": {
        "required": [
          "lookupName"
        ],
        "type": "object",
        "properties": {
          "lookupName": {
            "minLength": 1,
            "type": "string",
            "description": "The lookup name"
          },
          "valueFieldName": {
            "type": "string",
            "description": "The lookup value field name",
            "nullable": true
          },
          "textFieldName": {
            "type": "string",
            "description": "The lookup text/display field name",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The lookup settings"
      },
      "LookupValue": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "key": {
            "minLength": 1,
            "type": "string",
            "description": "The lookup key, unique within a lookup"
          },
          "value": {
            "minLength": 1,
            "type": "string",
            "description": "The lookup value as JSON"
          },
          "valueLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized lookup values",
            "nullable": true
          },
          "rangeValue": {
            "type": "number",
            "description": "The lookup range value, unique within a lookup",
            "format": "double",
            "nullable": true
          },
          "overrideType": {
            "$ref": "#/components/schemas/OverrideType"
          }
        },
        "additionalProperties": false,
        "description": "Represents a lookup value"
      },
      "LookupValueAudit": {
        "required": [
          "key",
          "lookupValueId",
          "value"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "lookupValueId": {
            "type": "integer",
            "description": "The lookup value id",
            "format": "int32"
          },
          "key": {
            "minLength": 1,
            "type": "string",
            "description": "The lookup key"
          },
          "value": {
            "minLength": 1,
            "type": "string",
            "description": "The lookup value as JSON"
          },
          "valueLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized lookup values",
            "nullable": true
          },
          "rangeValue": {
            "type": "number",
            "description": "The lookup range value",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The lookup value audit API object (immutable)"
      },
      "LookupValueData": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The lookup key",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The lookup value as JSON",
            "nullable": true
          },
          "rangeValue": {
            "type": "number",
            "description": "The lookup range value",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Lookup value date in a specific language"
      },
      "MemberInfo": {
        "type": "object",
        "properties": {
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MemberTypes": {
        "enum": [
          1,
          2,
          4,
          8,
          16,
          32,
          64,
          128,
          191
        ],
        "type": "integer",
        "format": "int32"
      },
      "MethodAttributes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          16,
          32,
          64,
          128,
          256,
          512,
          1024,
          2048,
          4096,
          8192,
          16384,
          32768,
          53248
        ],
        "type": "integer",
        "format": "int32"
      },
      "MethodBase": {
        "type": "object",
        "properties": {
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "attributes": {
            "$ref": "#/components/schemas/MethodAttributes"
          },
          "methodImplementationFlags": {
            "$ref": "#/components/schemas/MethodImplAttributes"
          },
          "callingConvention": {
            "$ref": "#/components/schemas/CallingConventions"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructor": {
            "type": "boolean",
            "readOnly": true
          },
          "isFinal": {
            "type": "boolean",
            "readOnly": true
          },
          "isHideBySig": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true
          },
          "isVirtual": {
            "type": "boolean",
            "readOnly": true
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "methodHandle": {
            "$ref": "#/components/schemas/RuntimeMethodHandle"
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MethodImplAttributes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          8,
          16,
          32,
          64,
          128,
          256,
          512,
          4096,
          65535
        ],
        "type": "integer",
        "format": "int32"
      },
      "MethodInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "attributes": {
            "$ref": "#/components/schemas/MethodAttributes"
          },
          "methodImplementationFlags": {
            "$ref": "#/components/schemas/MethodImplAttributes"
          },
          "callingConvention": {
            "$ref": "#/components/schemas/CallingConventions"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructor": {
            "type": "boolean",
            "readOnly": true
          },
          "isFinal": {
            "type": "boolean",
            "readOnly": true
          },
          "isHideBySig": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true
          },
          "isVirtual": {
            "type": "boolean",
            "readOnly": true
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "methodHandle": {
            "$ref": "#/components/schemas/RuntimeMethodHandle"
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "returnParameter": {
            "$ref": "#/components/schemas/ParameterInfo"
          },
          "returnType": {
            "$ref": "#/components/schemas/Type"
          },
          "returnTypeCustomAttributes": {
            "$ref": "#/components/schemas/ICustomAttributeProvider"
          }
        },
        "additionalProperties": false
      },
      "ModelError": {
        "type": "object",
        "properties": {
          "exception": {
            "$ref": "#/components/schemas/Exception"
          },
          "errorMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ModelStateEntry": {
        "type": "object",
        "properties": {
          "rawValue": {
            "nullable": true
          },
          "attemptedValue": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModelError"
            },
            "nullable": true,
            "readOnly": true
          },
          "validationState": {
            "$ref": "#/components/schemas/ModelValidationState"
          },
          "isContainerNode": {
            "type": "boolean",
            "readOnly": true
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModelStateEntry"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ModelValidationState": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "Module": {
        "type": "object",
        "properties": {
          "assembly": {
            "$ref": "#/components/schemas/Assembly"
          },
          "fullyQualifiedName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "mdStreamVersion": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "moduleVersionId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "scopeName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "moduleHandle": {
            "$ref": "#/components/schemas/ModuleHandle"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ModuleHandle": {
        "type": "object",
        "properties": {
          "mdStreamVersion": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Month": {
        "enum": [
          "January",
          "February",
          "March",
          "April",
          "May",
          "June",
          "July",
          "August",
          "September",
          "October",
          "November",
          "December"
        ],
        "type": "string",
        "description": "Enumeration with the year months"
      },
      "ObjectStatus": {
        "enum": [
          "Active",
          "Inactive"
        ],
        "type": "string",
        "description": "The object status"
      },
      "OverrideType": {
        "enum": [
          "Active",
          "Inactive"
        ],
        "type": "string",
        "description": "Override type for derivable object"
      },
      "ParameterAttributes": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          4096,
          8192,
          16384,
          32768,
          61440
        ],
        "type": "integer",
        "format": "int32"
      },
      "ParameterInfo": {
        "type": "object",
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ParameterAttributes"
          },
          "member": {
            "$ref": "#/components/schemas/MemberInfo"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "parameterType": {
            "$ref": "#/components/schemas/Type"
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isIn": {
            "type": "boolean",
            "readOnly": true
          },
          "isLcid": {
            "type": "boolean",
            "readOnly": true
          },
          "isOptional": {
            "type": "boolean",
            "readOnly": true
          },
          "isOut": {
            "type": "boolean",
            "readOnly": true
          },
          "isRetval": {
            "type": "boolean",
            "readOnly": true
          },
          "defaultValue": {
            "nullable": true,
            "readOnly": true
          },
          "rawDefaultValue": {
            "nullable": true,
            "readOnly": true
          },
          "hasDefaultValue": {
            "type": "boolean",
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PasswordChangeRequest": {
        "type": "object",
        "properties": {
          "newPassword": {
            "type": "string",
            "description": "The new password",
            "nullable": true
          },
          "existingPassword": {
            "type": "string",
            "description": "The existing password",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Password change request\r\nUse cases:\r\n- set initial password: new=required, existing=ignored\r\n- change existing password: new=required, existing=required\r\n- reset password: new=null, existing=required"
      },
      "Payroll": {
        "required": [
          "divisionId",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The payroll name"
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized payroll names",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The payroll description",
            "nullable": true
          },
          "descriptionLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized payroll descriptions",
            "nullable": true
          },
          "divisionId": {
            "type": "integer",
            "description": "The division id (immutable)",
            "format": "int32"
          },
          "clusterSetCase": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The case cluster set (undefined: all)",
            "nullable": true
          },
          "clusterSetCaseField": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The case field cluster set (undefined: all)",
            "nullable": true
          },
          "clusterSetCollector": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The collector cluster set (undefined: all)",
            "nullable": true
          },
          "clusterSetCollectorRetro": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The collector cluster set for retro payrun jobs (undefined: all)",
            "nullable": true
          },
          "clusterSetWageType": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The wage type cluster set (undefined: all)",
            "nullable": true
          },
          "clusterSetWageTypeRetro": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The wage type cluster set for retro payrun jobs (undefined: all)",
            "nullable": true
          },
          "clusterSetCaseValue": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The case value cluster set (undefined: none, *: all)",
            "nullable": true
          },
          "clusterSetWageTypePeriod": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The wage type period result cluster set (undefined: none)",
            "nullable": true
          },
          "clusterSets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClusterSet"
            },
            "description": "Cluster sets",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The payroll API object"
      },
      "PayrollLayer": {
        "required": [
          "level",
          "regulationName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "level": {
            "type": "integer",
            "description": "The layer level as primary sorting key (descending)",
            "format": "int32"
          },
          "priority": {
            "type": "integer",
            "description": "The layer priority as secondary sorting key (descending, default: 1)",
            "format": "int32"
          },
          "regulationName": {
            "minLength": 1,
            "type": "string",
            "description": "The regulation name"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The payroll layer API object.\r\nPayroll layer evaluated order in payrolls:\r\n1. From th highest level to the lowest level\r\n2. Within a level: from th highest priority to the lowest priority"
      },
      "PayrollResult": {
        "required": [
          "cycleEnd",
          "cycleName",
          "cycleStart",
          "divisionId",
          "employeeId",
          "payrollId",
          "payrunJobId",
          "periodName",
          "periodStart"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "payrollId": {
            "type": "integer",
            "description": "The payroll id (immutable)",
            "format": "int32"
          },
          "payrunId": {
            "type": "integer",
            "description": "The payrun id (immutable)",
            "format": "int32"
          },
          "payrunJobId": {
            "type": "integer",
            "description": "The payrun job id (immutable)",
            "format": "int32"
          },
          "employeeId": {
            "type": "integer",
            "description": "The employee id (immutable)",
            "format": "int32"
          },
          "divisionId": {
            "type": "integer",
            "description": "The division id (immutable)",
            "format": "int32"
          },
          "cycleName": {
            "minLength": 1,
            "type": "string",
            "description": "The cycle name (immutable)"
          },
          "cycleStart": {
            "type": "string",
            "description": "The cycle start date (immutable)",
            "format": "date-time"
          },
          "cycleEnd": {
            "type": "string",
            "description": "The cycle end date (immutable)",
            "format": "date-time"
          },
          "periodName": {
            "minLength": 1,
            "type": "string",
            "description": "The period name (immutable)"
          },
          "periodStart": {
            "type": "string",
            "description": "The period start date (immutable)",
            "format": "date-time"
          },
          "periodEnd": {
            "type": "string",
            "description": "The period end date (immutable)",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "The payroll result info API object"
      },
      "PayrollResultSet": {
        "required": [
          "cycleEnd",
          "cycleName",
          "cycleStart",
          "divisionId",
          "employeeId",
          "payrollId",
          "payrunJobId",
          "periodName",
          "periodStart"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "payrollId": {
            "type": "integer",
            "description": "The payroll id (immutable)",
            "format": "int32"
          },
          "payrunId": {
            "type": "integer",
            "description": "The payrun id (immutable)",
            "format": "int32"
          },
          "payrunJobId": {
            "type": "integer",
            "description": "The payrun job id (immutable)",
            "format": "int32"
          },
          "employeeId": {
            "type": "integer",
            "description": "The employee id (immutable)",
            "format": "int32"
          },
          "divisionId": {
            "type": "integer",
            "description": "The division id (immutable)",
            "format": "int32"
          },
          "cycleName": {
            "minLength": 1,
            "type": "string",
            "description": "The cycle name (immutable)"
          },
          "cycleStart": {
            "type": "string",
            "description": "The cycle start date (immutable)",
            "format": "date-time"
          },
          "cycleEnd": {
            "type": "string",
            "description": "The cycle end date (immutable)",
            "format": "date-time"
          },
          "periodName": {
            "minLength": 1,
            "type": "string",
            "description": "The period name (immutable)"
          },
          "periodStart": {
            "type": "string",
            "description": "The period start date (immutable)",
            "format": "date-time"
          },
          "periodEnd": {
            "type": "string",
            "description": "The period end date (immutable)",
            "format": "date-time"
          },
          "wageTypeResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WageTypeResultSet"
            },
            "description": "The wage type results",
            "nullable": true
          },
          "collectorResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectorResultSet"
            },
            "description": "The collector results",
            "nullable": true
          },
          "payrunResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayrunResult"
            },
            "description": "The payrun results",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The payroll result set API object"
      },
      "Payrun": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "payrollId": {
            "type": "integer",
            "description": "The payroll id (immutable)",
            "format": "int32"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The payrun name (immutable)"
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized payrun name",
            "nullable": true
          },
          "defaultReason": {
            "type": "string",
            "description": "The default payrun reason",
            "nullable": true
          },
          "defaultReasonLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized default payrun reasons",
            "nullable": true
          },
          "startExpression": {
            "type": "string",
            "description": "The payrun start expression",
            "nullable": true
          },
          "employeeAvailableExpression": {
            "type": "string",
            "description": "The employee available expression",
            "nullable": true
          },
          "employeeStartExpression": {
            "type": "string",
            "description": "The expression evaluates the employee start",
            "nullable": true
          },
          "employeeEndExpression": {
            "type": "string",
            "description": "The expression evaluates the employee end",
            "nullable": true
          },
          "wageTypeAvailableExpression": {
            "type": "string",
            "description": "The wage type available expression",
            "nullable": true
          },
          "endExpression": {
            "type": "string",
            "description": "The payrun end expression",
            "nullable": true
          },
          "retroTimeType": {
            "$ref": "#/components/schemas/RetroTimeType"
          }
        },
        "additionalProperties": false,
        "description": "The payrun API object"
      },
      "PayrunJob": {
        "required": [
          "createdReason",
          "createdUserId",
          "cycleEnd",
          "cycleName",
          "cycleStart",
          "evaluationDate",
          "jobStart",
          "name",
          "payrollId",
          "payrunId",
          "periodEnd",
          "periodName",
          "periodStart"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The payrun job name (immutable)"
          },
          "owner": {
            "type": "string",
            "description": "The job owner (immutable)",
            "nullable": true
          },
          "payrunId": {
            "type": "integer",
            "description": "The payrun id (immutable)",
            "format": "int32"
          },
          "payrollId": {
            "type": "integer",
            "description": "The payroll id (immutable)",
            "format": "int32"
          },
          "divisionId": {
            "type": "integer",
            "description": "The division id (immutable)",
            "format": "int32"
          },
          "parentJobId": {
            "type": "integer",
            "description": "The parent payrun job id, e.g. the parent retro pay run job (immutable)",
            "format": "int32",
            "nullable": true
          },
          "createdUserId": {
            "type": "integer",
            "description": "The created user id (immutable)",
            "format": "int32"
          },
          "releasedUserId": {
            "type": "integer",
            "description": "The release user id (immutable)",
            "format": "int32",
            "nullable": true
          },
          "processedUserId": {
            "type": "integer",
            "description": "The processed user id (immutable)",
            "format": "int32",
            "nullable": true
          },
          "finishedUserId": {
            "type": "integer",
            "description": "The finished user id (immutable)",
            "format": "int32",
            "nullable": true
          },
          "retroPayMode": {
            "$ref": "#/components/schemas/RetroPayMode"
          },
          "jobStatus": {
            "$ref": "#/components/schemas/PayrunJobStatus"
          },
          "jobResult": {
            "$ref": "#/components/schemas/PayrunJobResult"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The job tags (immutable)",
            "nullable": true
          },
          "forecast": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The forecast name (immutable)",
            "nullable": true
          },
          "culture": {
            "type": "string",
            "description": "The culture including the calendar (immutable)",
            "nullable": true
          },
          "cycleName": {
            "minLength": 1,
            "type": "string",
            "description": "The cycle name (immutable)"
          },
          "cycleStart": {
            "type": "string",
            "description": "The cycle start date (immutable)",
            "format": "date-time"
          },
          "cycleEnd": {
            "type": "string",
            "description": "The cycle end date (immutable)",
            "format": "date-time"
          },
          "periodName": {
            "minLength": 1,
            "type": "string",
            "description": "The period name (immutable)"
          },
          "periodStart": {
            "type": "string",
            "description": "The period start date (immutable)",
            "format": "date-time"
          },
          "periodEnd": {
            "type": "string",
            "description": "The period end date (immutable)",
            "format": "date-time"
          },
          "evaluationDate": {
            "type": "string",
            "description": "The evaluation date (immutable)",
            "format": "date-time"
          },
          "released": {
            "type": "string",
            "description": "The job release date (immutable)",
            "format": "date-time",
            "nullable": true
          },
          "processed": {
            "type": "string",
            "description": "The job process date (immutable)",
            "format": "date-time",
            "nullable": true
          },
          "finished": {
            "type": "string",
            "description": "The job finish date (immutable)",
            "format": "date-time",
            "nullable": true
          },
          "createdReason": {
            "minLength": 1,
            "type": "string",
            "description": "The create reason (immutable)"
          },
          "releasedReason": {
            "type": "string",
            "description": "The release reason (immutable)",
            "nullable": true
          },
          "processedReason": {
            "type": "string",
            "description": "The process reason (immutable)",
            "nullable": true
          },
          "finishedReason": {
            "type": "string",
            "description": "The finished reason (immutable)",
            "nullable": true
          },
          "totalEmployeeCount": {
            "type": "integer",
            "description": "Total employee count (immutable)",
            "format": "int32"
          },
          "processedEmployeeCount": {
            "type": "integer",
            "description": "Processed employee count (immutable)",
            "format": "int32"
          },
          "jobStart": {
            "type": "string",
            "description": "The job start date (immutable)",
            "format": "date-time"
          },
          "jobEnd": {
            "type": "string",
            "description": "The job end date (immutable)",
            "format": "date-time",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "The job message (immutable)",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "description": "The job error message (immutable)",
            "nullable": true
          },
          "employees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayrunJobEmployee"
            },
            "description": "The payrun employees",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The payrun job API object"
      },
      "PayrunJobEmployee": {
        "required": [
          "employeeId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "employeeId": {
            "type": "integer",
            "description": "The employee id (immutable)",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The payrun job employee API object"
      },
      "PayrunJobInvocation": {
        "required": [
          "name",
          "payrunId",
          "periodStart",
          "reason",
          "userId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "payrunId": {
            "type": "integer",
            "description": "The payrun id (immutable)",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "description": "The user id (immutable)",
            "format": "int32"
          },
          "payrunJobId": {
            "type": "integer",
            "description": "The payrun job id (immutable)",
            "format": "int32"
          },
          "parentJobId": {
            "type": "integer",
            "description": "The parent payrun job id, e.g. the parent retro pay run job (immutable)",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The job name (immutable)"
          },
          "owner": {
            "type": "string",
            "description": "The job owner (immutable)",
            "nullable": true
          },
          "retroJobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RetroPayrunJob"
            },
            "description": "The retro payrun jobs, requires the ParentJobId (immutable)",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The job tags (immutable)",
            "nullable": true
          },
          "forecast": {
            "type": "string",
            "description": "The forecast name (immutable)",
            "nullable": true
          },
          "retroPayMode": {
            "$ref": "#/components/schemas/RetroPayMode"
          },
          "jobResult": {
            "$ref": "#/components/schemas/PayrunJobResult"
          },
          "periodStart": {
            "type": "string",
            "description": "The period start date (immutable)",
            "format": "date-time"
          },
          "evaluationDate": {
            "type": "string",
            "description": "The evaluation date (immutable)",
            "format": "date-time",
            "nullable": true
          },
          "reason": {
            "minLength": 1,
            "type": "string",
            "description": "The execution reason (immutable)"
          },
          "logLevel": {
            "$ref": "#/components/schemas/LogLevel"
          },
          "employeeIdentifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The payrun employee identifiers",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Payrun job attributes",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The payrun job invocation API object"
      },
      "PayrunJobResult": {
        "enum": [
          "Full",
          "Incremental"
        ],
        "type": "string",
        "description": "The payrun job result"
      },
      "PayrunJobStatus": {
        "enum": [
          "Draft",
          "Release",
          "Process",
          "Complete",
          "Forecast",
          "Abort",
          "Cancel"
        ],
        "type": "string",
        "description": "The payrun job status\r\nSupported state changes:\r\n- *: Draft | Forecast | Abort\r\n- Draft: Release | Abort\r\n- Release: Process | Abort\r\n- Process: Complete | Cancel"
      },
      "PayrunParameter": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The payrun parameter name"
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized wage type names",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The payrun parameter description",
            "nullable": true
          },
          "descriptionLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized payrun parameter descriptions",
            "nullable": true
          },
          "mandatory": {
            "type": "boolean",
            "description": "The parameter mandatory state"
          },
          "value": {
            "type": "string",
            "description": "The parameter value (JSON)",
            "nullable": true
          },
          "valueType": {
            "$ref": "#/components/schemas/ValueType"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The payrun parameter API object"
      },
      "PayrunResult": {
        "required": [
          "end",
          "name",
          "source",
          "start",
          "value",
          "valueType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "payrollResultId": {
            "type": "integer",
            "description": "The payroll result id (immutable)",
            "format": "int32"
          },
          "source": {
            "minLength": 1,
            "type": "string",
            "description": "The result source (immutable)"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The result name (immutable)"
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized result names",
            "nullable": true
          },
          "slot": {
            "type": "string",
            "description": "The result slot (immutable)",
            "nullable": true
          },
          "valueType": {
            "$ref": "#/components/schemas/ValueType"
          },
          "value": {
            "minLength": 1,
            "type": "string",
            "description": "The result value (immutable)"
          },
          "numericValue": {
            "type": "number",
            "description": "The numeric result value (immutable)",
            "format": "double",
            "nullable": true
          },
          "start": {
            "type": "string",
            "description": "The period starting date for the value",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "description": "The period ending date for the value",
            "format": "date-time"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The result tags",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "The result attributes (immutable)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The payrun result API object"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "PropertyAttributes": {
        "enum": [
          0,
          512,
          1024,
          4096,
          8192,
          16384,
          32768,
          62464
        ],
        "type": "integer",
        "format": "int32"
      },
      "PropertyInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "propertyType": {
            "$ref": "#/components/schemas/Type"
          },
          "attributes": {
            "$ref": "#/components/schemas/PropertyAttributes"
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "canRead": {
            "type": "boolean",
            "readOnly": true
          },
          "canWrite": {
            "type": "boolean",
            "readOnly": true
          },
          "getMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "setMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          }
        },
        "additionalProperties": false
      },
      "QueryResultType": {
        "enum": [
          "Items",
          "Count",
          "ItemsWithCount"
        ],
        "type": "string",
        "description": "The query result type"
      },
      "Regulation": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The regulation name"
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized regulation names",
            "nullable": true
          },
          "version": {
            "type": "integer",
            "description": "The regulation version, unique per regulation name",
            "format": "int32"
          },
          "sharedRegulation": {
            "type": "boolean",
            "description": "Shared regulation (immutable)"
          },
          "validFrom": {
            "type": "string",
            "description": "The date the regulation to be in force, anytime if undefined",
            "format": "date-time",
            "nullable": true
          },
          "owner": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The regulation owner",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The regulation description",
            "nullable": true
          },
          "descriptionLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized regulation descriptions",
            "nullable": true
          },
          "baseRegulations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Required base regulations",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The payroll regulation API object"
      },
      "RegulationShare": {
        "required": [
          "consumerTenantId",
          "providerRegulationId",
          "providerTenantId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "providerTenantId": {
            "type": "integer",
            "description": "The provider tenant id",
            "format": "int32"
          },
          "providerRegulationId": {
            "type": "integer",
            "description": "The provider regulation id",
            "format": "int32"
          },
          "consumerTenantId": {
            "type": "integer",
            "description": "The consumer tenant id",
            "format": "int32"
          },
          "consumerDivisionId": {
            "type": "integer",
            "description": "The consumer division id",
            "format": "int32",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The regulation permission API object"
      },
      "Report": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The payroll report name"
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized payroll report names",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The payroll report description",
            "nullable": true
          },
          "descriptionLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized payroll report descriptions",
            "nullable": true
          },
          "category": {
            "type": "string",
            "description": "The report category",
            "nullable": true
          },
          "attributeMode": {
            "$ref": "#/components/schemas/ReportAttributeMode"
          },
          "queries": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The report queries, key is the query name and value the api operation name",
            "nullable": true
          },
          "relations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataRelation"
            },
            "description": "The report data relations, based on the queries",
            "nullable": true
          },
          "buildExpression": {
            "type": "string",
            "description": "The report build expression",
            "nullable": true
          },
          "startExpression": {
            "type": "string",
            "description": "The report start expression",
            "nullable": true
          },
          "endExpression": {
            "type": "string",
            "description": "The report end expression",
            "nullable": true
          },
          "overrideType": {
            "$ref": "#/components/schemas/OverrideType"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          },
          "clusters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The wage type clusters",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The report API object"
      },
      "ReportAttributeMode": {
        "enum": [
          "Json",
          "Table"
        ],
        "type": "string",
        "description": "The case result kind"
      },
      "ReportAudit": {
        "required": [
          "name",
          "reportId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "reportId": {
            "type": "integer",
            "description": "The report id",
            "format": "int32"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The payroll result report name"
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized payroll result report names",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The payroll result report description",
            "nullable": true
          },
          "descriptionLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized payroll result report descriptions",
            "nullable": true
          },
          "category": {
            "type": "string",
            "description": "The report category",
            "nullable": true
          },
          "attributeMode": {
            "$ref": "#/components/schemas/ReportAttributeMode"
          },
          "overrideType": {
            "$ref": "#/components/schemas/OverrideType"
          },
          "queries": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The report queries, key is the query name and value the api operation name",
            "nullable": true
          },
          "relations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataRelation"
            },
            "description": "The report data relations, based on the queries",
            "nullable": true
          },
          "buildExpression": {
            "type": "string",
            "description": "The report build expression",
            "nullable": true
          },
          "startExpression": {
            "type": "string",
            "description": "The report start expression",
            "nullable": true
          },
          "endExpression": {
            "type": "string",
            "description": "The report end expression",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          },
          "clusters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The wage type clusters",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The report audit API object"
      },
      "ReportLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "reportName": {
            "type": "string",
            "description": "The report name (immutable)",
            "nullable": true
          },
          "reportDate": {
            "type": "string",
            "description": "The report date (immutable)",
            "format": "date-time"
          },
          "key": {
            "type": "string",
            "description": "The report log key (immutable)",
            "nullable": true
          },
          "user": {
            "type": "string",
            "description": "The report user (immutable)",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "The report message (immutable)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A payroll report log"
      },
      "ReportParameter": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The report parameter name"
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized wage type names",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The report parameter description",
            "nullable": true
          },
          "descriptionLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized report parameter descriptions",
            "nullable": true
          },
          "mandatory": {
            "type": "boolean",
            "description": "The parameter mandatory state"
          },
          "hidden": {
            "type": "boolean",
            "description": "Hidden parameter"
          },
          "value": {
            "type": "string",
            "description": "The parameter value (JSON)",
            "nullable": true
          },
          "valueType": {
            "$ref": "#/components/schemas/ValueType"
          },
          "parameterType": {
            "$ref": "#/components/schemas/ReportParameterType"
          },
          "overrideType": {
            "$ref": "#/components/schemas/OverrideType"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The report parameter API object"
      },
      "ReportParameterAudit": {
        "required": [
          "name",
          "reportParameterId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "reportParameterId": {
            "type": "integer",
            "description": "The report parameter id",
            "format": "int32"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The report parameter name"
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized wage type names",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The report parameter description",
            "nullable": true
          },
          "descriptionLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized report parameter descriptions",
            "nullable": true
          },
          "mandatory": {
            "type": "boolean",
            "description": "The parameter mandatory state"
          },
          "hidden": {
            "type": "boolean",
            "description": "Hidden parameter"
          },
          "value": {
            "type": "string",
            "description": "The parameter value (JSON)",
            "nullable": true
          },
          "valueType": {
            "$ref": "#/components/schemas/ValueType"
          },
          "parameterType": {
            "$ref": "#/components/schemas/ReportParameterType"
          },
          "overrideType": {
            "$ref": "#/components/schemas/OverrideType"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The report parameter audit API object"
      },
      "ReportParameterType": {
        "enum": [
          "Value",
          "Now",
          "Today",
          "TenantId",
          "UserId",
          "EmployeeId",
          "RegulationId",
          "PayrollId",
          "PayrunId",
          "ReportId",
          "WebhookId"
        ],
        "type": "string",
        "description": "The report value types"
      },
      "ReportRequest": {
        "type": "object",
        "properties": {
          "culture": {
            "type": "string",
            "description": "The report culture",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "description": "The report user",
            "format": "int32"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The report parameters",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The report request API object"
      },
      "ReportResponse": {
        "type": "object",
        "properties": {
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The report parameters",
            "nullable": true
          },
          "queries": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The report queries, key is the query name and value the api operation name",
            "nullable": true
          },
          "relations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataRelation"
            },
            "description": "The report data relations, based on the queries",
            "nullable": true
          },
          "reportName": {
            "type": "string",
            "description": "The report name",
            "nullable": true
          },
          "culture": {
            "type": "string",
            "description": "The report culture",
            "nullable": true
          },
          "user": {
            "type": "string",
            "description": "The report user identifier",
            "nullable": true
          },
          "result": {
            "$ref": "#/components/schemas/DataSet"
          }
        },
        "additionalProperties": false,
        "description": "The report response API object"
      },
      "ReportSet": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The payroll report name"
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized payroll report names",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The payroll report description",
            "nullable": true
          },
          "descriptionLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized payroll report descriptions",
            "nullable": true
          },
          "category": {
            "type": "string",
            "description": "The report category",
            "nullable": true
          },
          "attributeMode": {
            "$ref": "#/components/schemas/ReportAttributeMode"
          },
          "queries": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The report queries, key is the query name and value the api operation name",
            "nullable": true
          },
          "relations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataRelation"
            },
            "description": "The report data relations, based on the queries",
            "nullable": true
          },
          "buildExpression": {
            "type": "string",
            "description": "The report build expression",
            "nullable": true
          },
          "startExpression": {
            "type": "string",
            "description": "The report start expression",
            "nullable": true
          },
          "endExpression": {
            "type": "string",
            "description": "The report end expression",
            "nullable": true
          },
          "overrideType": {
            "$ref": "#/components/schemas/OverrideType"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          },
          "clusters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The wage type clusters",
            "nullable": true
          },
          "regulationId": {
            "type": "integer",
            "description": "The regulation id",
            "format": "int32"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportParameter"
            },
            "description": "The report parameters",
            "nullable": true
          },
          "templates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportTemplate"
            },
            "description": "The report templates",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The report set API object"
      },
      "ReportTemplate": {
        "required": [
          "content",
          "culture",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The payroll report template name"
          },
          "culture": {
            "minLength": 1,
            "type": "string",
            "description": "The report culture"
          },
          "content": {
            "minLength": 1,
            "type": "string",
            "description": "The report content (client owned)"
          },
          "contentType": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The report content type",
            "nullable": true
          },
          "schema": {
            "type": "string",
            "description": "The report schema (client owned)",
            "nullable": true
          },
          "resource": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The report external resource",
            "nullable": true
          },
          "overrideType": {
            "$ref": "#/components/schemas/OverrideType"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The report template API object"
      },
      "ReportTemplateAudit": {
        "required": [
          "content",
          "culture",
          "name",
          "reportTemplateId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The payroll report template name"
          },
          "reportTemplateId": {
            "type": "integer",
            "description": "The report parameter id",
            "format": "int32"
          },
          "culture": {
            "minLength": 1,
            "type": "string",
            "description": "The report culture"
          },
          "content": {
            "minLength": 1,
            "type": "string",
            "description": "The report content"
          },
          "contentType": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The report content type",
            "nullable": true
          },
          "schema": {
            "type": "string",
            "description": "The report schema",
            "nullable": true
          },
          "resource": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The report external resource",
            "nullable": true
          },
          "overrideType": {
            "$ref": "#/components/schemas/OverrideType"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The report template audit API object"
      },
      "RetroPayMode": {
        "enum": [
          "None",
          "ValueChange"
        ],
        "type": "string",
        "description": "The payrun retro pay mode"
      },
      "RetroPayrunJob": {
        "required": [
          "scheduleDate"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "scheduleDate": {
            "type": "string",
            "description": "The schedule date",
            "format": "date-time"
          },
          "resultTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The result tags",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The retro payrun job API object"
      },
      "RetroTimeType": {
        "enum": [
          "Anytime",
          "Cycle"
        ],
        "type": "string",
        "description": "The payrun retro type"
      },
      "RuntimeFieldHandle": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/IntPtr"
          }
        },
        "additionalProperties": false
      },
      "RuntimeMethodHandle": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/IntPtr"
          }
        },
        "additionalProperties": false
      },
      "RuntimeTypeHandle": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/IntPtr"
          }
        },
        "additionalProperties": false
      },
      "Script": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The script name (immutable)"
          },
          "functionTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunctionType"
            },
            "description": "The scripting function types as bitmask",
            "nullable": true
          },
          "value": {
            "minLength": 1,
            "type": "string",
            "description": "The script script"
          }
        },
        "additionalProperties": false,
        "description": "The regulation script API object"
      },
      "ScriptAudit": {
        "required": [
          "name",
          "scriptId",
          "value"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "scriptId": {
            "type": "integer",
            "description": "The script id",
            "format": "int32"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The script name"
          },
          "functionTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunctionType"
            },
            "description": "The scripting function types as bitmask",
            "nullable": true
          },
          "value": {
            "minLength": 1,
            "type": "string",
            "description": "The script script"
          }
        },
        "additionalProperties": false,
        "description": "The regulation script audit API object (immutable)"
      },
      "SecurityRuleSet": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "StructLayoutAttribute": {
        "type": "object",
        "properties": {
          "typeId": {
            "nullable": true,
            "readOnly": true
          },
          "value": {
            "$ref": "#/components/schemas/LayoutKind"
          }
        },
        "additionalProperties": false
      },
      "Task": {
        "required": [
          "instruction",
          "name",
          "scheduled",
          "scheduledUserId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The task name (immutable)"
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized task names (immutable)",
            "nullable": true
          },
          "category": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The task category",
            "nullable": true
          },
          "instruction": {
            "minLength": 1,
            "type": "string",
            "description": "The task instruction"
          },
          "scheduledUserId": {
            "type": "integer",
            "description": "The scheduled user id",
            "format": "int32"
          },
          "scheduled": {
            "type": "string",
            "description": "The task schedule date",
            "format": "date-time"
          },
          "completedUserId": {
            "type": "integer",
            "description": "The completed user id",
            "format": "int32",
            "nullable": true
          },
          "completed": {
            "type": "string",
            "description": "The task completed date",
            "format": "date-time",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The task API object"
      },
      "Tenant": {
        "required": [
          "identifier"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "identifier": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The unique identifier of the tenant (immutable)"
          },
          "culture": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The tenant culture name based on RFC 4646 (fallback: system culture)",
            "nullable": true
          },
          "calendar": {
            "type": "string",
            "description": "The tenant calendar (fallback: default calendar)",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The tenant API object"
      },
      "Type": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isInterface": {
            "type": "boolean",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "namespace": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "assemblyQualifiedName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "assembly": {
            "$ref": "#/components/schemas/Assembly"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "isNested": {
            "type": "boolean",
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "declaringMethod": {
            "$ref": "#/components/schemas/MethodBase"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "underlyingSystemType": {
            "$ref": "#/components/schemas/Type"
          },
          "isTypeDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "isArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isByRef": {
            "type": "boolean",
            "readOnly": true
          },
          "isPointer": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericType": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericTypeParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericType": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericTypeDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "isSZArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isVariableBoundArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isByRefLike": {
            "type": "boolean",
            "readOnly": true
          },
          "hasElementType": {
            "type": "boolean",
            "readOnly": true
          },
          "genericTypeArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "nullable": true,
            "readOnly": true
          },
          "genericParameterPosition": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "genericParameterAttributes": {
            "$ref": "#/components/schemas/GenericParameterAttributes"
          },
          "attributes": {
            "$ref": "#/components/schemas/TypeAttributes"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isImport": {
            "type": "boolean",
            "readOnly": true
          },
          "isSealed": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamANDAssem": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamORAssem": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isNotPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isAutoLayout": {
            "type": "boolean",
            "readOnly": true
          },
          "isExplicitLayout": {
            "type": "boolean",
            "readOnly": true
          },
          "isLayoutSequential": {
            "type": "boolean",
            "readOnly": true
          },
          "isAnsiClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isAutoClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isUnicodeClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isCOMObject": {
            "type": "boolean",
            "readOnly": true
          },
          "isContextful": {
            "type": "boolean",
            "readOnly": true
          },
          "isEnum": {
            "type": "boolean",
            "readOnly": true
          },
          "isMarshalByRef": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrimitive": {
            "type": "boolean",
            "readOnly": true
          },
          "isValueType": {
            "type": "boolean",
            "readOnly": true
          },
          "isSignatureType": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "structLayoutAttribute": {
            "$ref": "#/components/schemas/StructLayoutAttribute"
          },
          "typeInitializer": {
            "$ref": "#/components/schemas/ConstructorInfo"
          },
          "typeHandle": {
            "$ref": "#/components/schemas/RuntimeTypeHandle"
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "baseType": {
            "$ref": "#/components/schemas/Type"
          },
          "isSerializable": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "isVisible": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TypeAttributes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          16,
          24,
          32,
          128,
          256,
          1024,
          2048,
          4096,
          8192,
          16384,
          65536,
          131072,
          196608,
          262144,
          264192,
          1048576,
          12582912
        ],
        "type": "integer",
        "format": "int32"
      },
      "TypeInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isInterface": {
            "type": "boolean",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "namespace": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "assemblyQualifiedName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "assembly": {
            "$ref": "#/components/schemas/Assembly"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "isNested": {
            "type": "boolean",
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "declaringMethod": {
            "$ref": "#/components/schemas/MethodBase"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "underlyingSystemType": {
            "$ref": "#/components/schemas/Type"
          },
          "isTypeDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "isArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isByRef": {
            "type": "boolean",
            "readOnly": true
          },
          "isPointer": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericType": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericTypeParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericType": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericTypeDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "isSZArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isVariableBoundArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isByRefLike": {
            "type": "boolean",
            "readOnly": true
          },
          "hasElementType": {
            "type": "boolean",
            "readOnly": true
          },
          "genericTypeArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "nullable": true,
            "readOnly": true
          },
          "genericParameterPosition": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "genericParameterAttributes": {
            "$ref": "#/components/schemas/GenericParameterAttributes"
          },
          "attributes": {
            "$ref": "#/components/schemas/TypeAttributes"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isImport": {
            "type": "boolean",
            "readOnly": true
          },
          "isSealed": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamANDAssem": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamORAssem": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isNotPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isAutoLayout": {
            "type": "boolean",
            "readOnly": true
          },
          "isExplicitLayout": {
            "type": "boolean",
            "readOnly": true
          },
          "isLayoutSequential": {
            "type": "boolean",
            "readOnly": true
          },
          "isAnsiClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isAutoClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isUnicodeClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isCOMObject": {
            "type": "boolean",
            "readOnly": true
          },
          "isContextful": {
            "type": "boolean",
            "readOnly": true
          },
          "isEnum": {
            "type": "boolean",
            "readOnly": true
          },
          "isMarshalByRef": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrimitive": {
            "type": "boolean",
            "readOnly": true
          },
          "isValueType": {
            "type": "boolean",
            "readOnly": true
          },
          "isSignatureType": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "structLayoutAttribute": {
            "$ref": "#/components/schemas/StructLayoutAttribute"
          },
          "typeInitializer": {
            "$ref": "#/components/schemas/ConstructorInfo"
          },
          "typeHandle": {
            "$ref": "#/components/schemas/RuntimeTypeHandle"
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "baseType": {
            "$ref": "#/components/schemas/Type"
          },
          "isSerializable": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "isVisible": {
            "type": "boolean",
            "readOnly": true
          },
          "genericTypeParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredConstructors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConstructorInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MethodInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredNestedTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "implementedInterfaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "User": {
        "required": [
          "firstName",
          "identifier",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "identifier": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The user unique identifier"
          },
          "password": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The user password",
            "nullable": true
          },
          "firstName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The first name of the user"
          },
          "lastName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The last name of the user"
          },
          "culture": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The user culture name based on RFC 4646",
            "nullable": true
          },
          "userType": {
            "$ref": "#/components/schemas/UserType"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The payroll user API object"
      },
      "UserType": {
        "enum": [
          "User",
          "Employee",
          "Administrator",
          "Supervisor"
        ],
        "type": "string",
        "description": "The type of the user"
      },
      "ValueScope": {
        "enum": [
          "Local",
          "Global"
        ],
        "type": "string",
        "description": "The scope for a payroll value"
      },
      "ValueType": {
        "enum": [
          "String",
          "Boolean",
          "Integer",
          "NumericBoolean",
          "Decimal",
          "DateTime",
          "None",
          "Date",
          "Weekday",
          "Month",
          "Year",
          "Money",
          "Percent",
          "WebResource"
        ],
        "type": "string",
        "description": "The payroll value types for cases"
      },
      "WageType": {
        "required": [
          "name",
          "wageTypeNumber"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "wageTypeNumber": {
            "type": "number",
            "description": "The wage type number (immutable)",
            "format": "double"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The wage type name"
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized wage type names",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The wage type description",
            "nullable": true
          },
          "descriptionLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized wage type descriptions",
            "nullable": true
          },
          "overrideType": {
            "$ref": "#/components/schemas/OverrideType"
          },
          "valueType": {
            "$ref": "#/components/schemas/ValueType"
          },
          "calendar": {
            "type": "string",
            "description": "The wage type calendar (fallback: employee calendar)",
            "nullable": true
          },
          "collectors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Associated collectors",
            "nullable": true
          },
          "collectorGroups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Associated collector groups",
            "nullable": true
          },
          "valueExpression": {
            "type": "string",
            "description": "Expression: calculates of the wage type value",
            "nullable": true
          },
          "resultExpression": {
            "type": "string",
            "description": "Expression: calculates of the wage type result attributes",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          },
          "clusters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The wage type clusters",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The regulation wage type API object"
      },
      "WageTypeAudit": {
        "required": [
          "wageTypeId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "wageTypeId": {
            "type": "integer",
            "description": "The wage type id",
            "format": "int32"
          },
          "wageTypeNumber": {
            "type": "number",
            "description": "The wage type number",
            "format": "double"
          },
          "name": {
            "type": "string",
            "description": "The wage type name",
            "nullable": true
          },
          "nameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized wage type names",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The wage type description",
            "nullable": true
          },
          "descriptionLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized wage type descriptions",
            "nullable": true
          },
          "overrideType": {
            "$ref": "#/components/schemas/OverrideType"
          },
          "valueType": {
            "$ref": "#/components/schemas/ValueType"
          },
          "calendar": {
            "type": "string",
            "description": "The wage type calendar",
            "nullable": true
          },
          "collectors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Associated collectors",
            "nullable": true
          },
          "collectorGroups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Associated collector groups",
            "nullable": true
          },
          "valueExpression": {
            "type": "string",
            "description": "Expression: calculates of the wage type value",
            "nullable": true
          },
          "resultExpression": {
            "type": "string",
            "description": "Expression: calculates of the wage type result attributes",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          },
          "clusters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The wage type clusters",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The regulation wage type audit API object (immutable)"
      },
      "WageTypeCustomResult": {
        "required": [
          "end",
          "source",
          "start",
          "value",
          "wageTypeNumber"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "wageTypeResultId": {
            "type": "integer",
            "description": "The wage type result id (immutable)",
            "format": "int32"
          },
          "wageTypeNumber": {
            "type": "number",
            "description": "The wage type number (immutable)",
            "format": "double"
          },
          "wageTypeName": {
            "type": "string",
            "description": "The wage type name (immutable)",
            "nullable": true
          },
          "wageTypeNameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized wage type names (immutable)",
            "nullable": true
          },
          "source": {
            "minLength": 1,
            "type": "string",
            "description": "The value source (immutable)"
          },
          "valueType": {
            "$ref": "#/components/schemas/ValueType"
          },
          "value": {
            "type": "number",
            "description": "The wage type custom result value (immutable)",
            "format": "double"
          },
          "start": {
            "type": "string",
            "description": "The period starting date for the value",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "description": "The period ending date for the value",
            "format": "date-time"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The result tags",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "The result attributes (immutable)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The wage type custom result API object"
      },
      "WageTypeResult": {
        "required": [
          "end",
          "start",
          "value",
          "wageTypeId",
          "wageTypeName",
          "wageTypeNumber"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "payrollResultId": {
            "type": "integer",
            "description": "The payroll result id (immutable)",
            "format": "int32"
          },
          "wageTypeId": {
            "type": "integer",
            "description": "The wage type id (immutable)",
            "format": "int32"
          },
          "wageTypeNumber": {
            "type": "number",
            "description": "The wage type number (immutable)",
            "format": "double"
          },
          "wageTypeName": {
            "minLength": 1,
            "type": "string",
            "description": "The wage type name (immutable)"
          },
          "wageTypeNameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized wage type names (immutable)",
            "nullable": true
          },
          "valueType": {
            "$ref": "#/components/schemas/ValueType"
          },
          "value": {
            "type": "number",
            "description": "The wage type result value (immutable)",
            "format": "double"
          },
          "start": {
            "type": "string",
            "description": "The starting date for the value",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "description": "The ending date for the value",
            "format": "date-time"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The result tags",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "The result attributes (immutable)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The wage type result API object"
      },
      "WageTypeResultSet": {
        "required": [
          "end",
          "start",
          "value",
          "wageTypeId",
          "wageTypeName",
          "wageTypeNumber"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "payrollResultId": {
            "type": "integer",
            "description": "The payroll result id (immutable)",
            "format": "int32"
          },
          "wageTypeId": {
            "type": "integer",
            "description": "The wage type id (immutable)",
            "format": "int32"
          },
          "wageTypeNumber": {
            "type": "number",
            "description": "The wage type number (immutable)",
            "format": "double"
          },
          "wageTypeName": {
            "minLength": 1,
            "type": "string",
            "description": "The wage type name (immutable)"
          },
          "wageTypeNameLocalizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "The localized wage type names (immutable)",
            "nullable": true
          },
          "valueType": {
            "$ref": "#/components/schemas/ValueType"
          },
          "value": {
            "type": "number",
            "description": "The wage type result value (immutable)",
            "format": "double"
          },
          "start": {
            "type": "string",
            "description": "The starting date for the value",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "description": "The ending date for the value",
            "format": "date-time"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The result tags",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "The result attributes (immutable)",
            "nullable": true
          },
          "customResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WageTypeCustomResult"
            },
            "description": "The wage type custom results (immutable)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The wage type result set API object"
      },
      "Webhook": {
        "required": [
          "action",
          "name",
          "receiverAddress"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The payroll name"
          },
          "receiverAddress": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The webhook receiver address"
          },
          "action": {
            "$ref": "#/components/schemas/WebhookAction"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Custom attributes",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The Webhook API object"
      },
      "WebhookAction": {
        "enum": [
          "None",
          "CaseFunctionRequest",
          "CaseChangeAdded",
          "PayrunFunctionRequest",
          "PayrunJobProcess",
          "PayrunJobFinish",
          "ReportFunctionRequest",
          "TaskChange"
        ],
        "type": "string",
        "description": "The Webhook message type"
      },
      "WebhookMessage": {
        "required": [
          "actionName",
          "receiverAddress",
          "requestDate"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique object id (immutable)",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ObjectStatus"
          },
          "created": {
            "type": "string",
            "description": "The date which the API object was created (immutable)",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date which the API object was last updated (immutable)",
            "format": "date-time"
          },
          "actionName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The webhook action name"
          },
          "receiverAddress": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The webhook receiver address"
          },
          "requestDate": {
            "type": "string",
            "description": "The request date",
            "format": "date-time"
          },
          "requestMessage": {
            "type": "string",
            "description": "The request message",
            "nullable": true
          },
          "requestOperation": {
            "type": "string",
            "description": "The request operation",
            "nullable": true
          },
          "responseDate": {
            "type": "string",
            "description": "The response date",
            "format": "date-time"
          },
          "responseStatus": {
            "type": "integer",
            "description": "The response HTTP status code",
            "format": "int32"
          },
          "responseMessage": {
            "type": "string",
            "description": "The response message",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The Webhook message API object"
      }
    }
  }
}